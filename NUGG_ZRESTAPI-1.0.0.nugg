<?xml version="1.0" encoding="utf-8"?>
<nugget name="ZRESTAPI-1.0.0">
 <CLAS CLSNAME="ZCL_REST_RESOURCE_HELLO_WORLD" VERSION="1" LANGU="E" DESCRIPT="Hello World" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <implementing CLSNAME="ZCL_REST_RESOURCE_HELLO_WORLD" REFCLSNAME="ZIF_REST_RESOURCE_READ" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1"/>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool>
   <language SPRAS="E"/>
  </textPool>
  <interfaceMethod CLSNAME="ZCL_REST_RESOURCE_HELLO_WORLD" CPDNAME="ZIF_REST_RESOURCE_READ~READ">
   <source>METHOD zif_rest_resource_read~read.

  DATA: ls_response TYPE zst_rest_response_basic.

  ls_response-success = &apos;true&apos;.
  ls_response-msg     = &apos;Hello World&apos;.
  ls_response-code    = 200.

  e_response = ls_response.

ENDMETHOD.</source>
  </interfaceMethod>
 </CLAS>
 <CLAS CLSNAME="ZCL_REST_AUTH" VERSION="1" LANGU="E" DESCRIPT="REST API - User Authentication" CATEGORY="00" EXPOSURE="0" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool>
   <language SPRAS="E"/>
  </textPool>
  <typeUsage CLSNAME="ZCL_REST_AUTH" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <attribute CLSNAME="ZCL_REST_AUTH" CMPNAME="REF" VERSION="1" LANGU="E" DESCRIPT="REST API - User Authentication" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_REST_AUTH" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_REST_AUTH" CMPNAME="AUTHENTICATE" VERSION="1" LANGU="E" DESCRIPT="Perform user authentication" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_REST_AUTH" CMPNAME="AUTHENTICATE" SCONAME="I_ID" VERSION="1" LANGU="E" DESCRIPT="Internet user ID" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_REST_AUTH" CMPNAME="AUTHENTICATE" SCONAME="I_OBJTYPE" VERSION="1" LANGU="E" DESCRIPT="Business object type" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PARVALUE="&apos;BUS1008&apos;"/>
   <parameter CLSNAME="ZCL_REST_AUTH" CMPNAME="AUTHENTICATE" SCONAME="I_PASSWORD" VERSION="1" LANGU="E" DESCRIPT="Internet user password" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_REST_AUTH" CMPNAME="AUTHENTICATE" SCONAME="I_TOKEN" VERSION="1" LANGU="E" DESCRIPT="Authentication token" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_REST_AUTH" CMPNAME="AUTHENTICATE" SCONAME="I_TOKEN_CO" VERSION="1" LANGU="E" DESCRIPT="Token content to check" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_REST_AUTH" CMPNAME="AUTHENTICATE" SCONAME="I_APP" VERSION="1" LANGU="E" DESCRIPT="App ID" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_REST_AUTH" CMPNAME="AUTHENTICATE" SCONAME="I_T_NVP" VERSION="1" LANGU="E" DESCRIPT="Name/value pairs table" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TIHTTPNVP" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_REST_AUTH" CMPNAME="AUTHENTICATE" SCONAME="R_AUTH_OK" VERSION="1" LANGU="E" DESCRIPT="Ok = &apos;X&apos;, not Ok = &apos; &apos;" CMPTYPE="1" MTDTYPE="0" EDITORDER="8 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ABAP_BOOL"/>
   <source>METHOD authenticate.

  &quot; Objects
  DATA: lo_usw TYPE REF TO zcl_usw.

  lo_usw = zcl_usw=&gt;get_instance( ).

  &quot; User/password auth
  IF ( NOT i_id IS INITIAL ) AND ( NOT i_password IS INITIAL ).

    lo_usw-&gt;check_credentials(
      EXPORTING
        i_id       = i_id
        i_objtype  = i_objtype
        i_password = i_password
      RECEIVING
        r_auth_ok  = r_auth_ok
    ).

    IF r_auth_ok = &apos;X&apos;.

      lo_usw-&gt;exec_user_switch(
        EXPORTING
          i_id        = i_id
          i_objtype   = i_objtype
        RECEIVING
          r_switch_ok = r_auth_ok
      ).

    ENDIF.

  ELSEIF ( NOT i_token IS INITIAL ) AND ( NOT i_token_co IS INITIAL ).

    lo_usw-&gt;check_token(
      EXPORTING
        i_id       = i_id
        i_objtype  = i_objtype
        i_app      = i_app
        i_token    = i_token
        i_token_co = i_token_co
        i_t_nvp    = i_t_nvp
      RECEIVING
        r_token_ok = r_auth_ok
    ).

    IF r_auth_ok = &apos;X&apos;.

      lo_usw-&gt;exec_user_switch(
        EXPORTING
          i_id        = i_id
          i_objtype   = i_objtype
        RECEIVING
          r_switch_ok = r_auth_ok
      ).

    ENDIF.

  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_REST_AUTH" CMPNAME="GET_INSTANCE" VERSION="1" LANGU="E" DESCRIPT="Return instance (singleton)" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_REST_AUTH" CMPNAME="GET_INSTANCE" SCONAME="R_REF" VERSION="1" LANGU="E" DESCRIPT="REST API - User Authentication" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_REST_AUTH"/>
   <source>METHOD get_instance.
  IF ref IS NOT BOUND.
    CREATE OBJECT ref.
  ENDIF.
  r_ref = ref.
ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_USW" VERSION="1" LANGU="E" DESCRIPT="User Switch" CATEGORY="00" EXPOSURE="0" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool>
   <language SPRAS="E">
    <textElement ID="I" KEY="001" ENTRY="Authentication failed. User and/or password is invalid" LENGTH="60 "/>
    <textElement ID="I" KEY="002" ENTRY="Dear user," LENGTH="16 "/>
    <textElement ID="I" KEY="003" ENTRY="Dear" LENGTH="7 "/>
    <textElement ID="I" KEY="004" ENTRY="Please find below the password reset link." LENGTH="56 "/>
    <textElement ID="I" KEY="005" ENTRY="Sincerely," LENGTH="15 "/>
    <textElement ID="I" KEY="006" ENTRY="Helpdesk Team" LENGTH="17 "/>
    <textElement ID="I" KEY="007" ENTRY="Password reset request" LENGTH="39 "/>
    <textElement ID="I" KEY="008" ENTRY="The new password cannot be equal to the current one" LENGTH="60 "/>
    <textElement ID="I" KEY="009" ENTRY="Reset password" LENGTH="19 "/>
    <textElement ID="I" KEY="011" ENTRY="Please inform the new password and its confirmation" LENGTH="60 "/>
    <textElement ID="I" KEY="012" ENTRY="The new password and its confirmation are not equal" LENGTH="60 "/>
   </language>
  </textPool>
  <typeUsage CLSNAME="ZCL_USW" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <attribute CLSNAME="ZCL_USW" CMPNAME="AUTH_OK" VERSION="1" LANGU="E" DESCRIPT="Usuário autenticado" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="CHAR1" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_USW" CMPNAME="REASON" VERSION="1" LANGU="E" DESCRIPT="Descrição do erro" EXPOSURE="0" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_USW" CMPNAME="REF" VERSION="1" LANGU="E" DESCRIPT="User Switch" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_USW" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_USW" CMPNAME="CHECK_CREDENTIALS" VERSION="1" LANGU="E" DESCRIPT="Check internet user credentials" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USW" CMPNAME="CHECK_CREDENTIALS" SCONAME="I_ID" VERSION="1" LANGU="E" DESCRIPT="ID Usuário Internet" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="CHECK_CREDENTIALS" SCONAME="I_OBJTYPE" VERSION="1" LANGU="E" DESCRIPT="Tipo de objeto" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="CHECK_CREDENTIALS" SCONAME="I_PASSWORD" VERSION="1" LANGU="E" DESCRIPT="Senha" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="CHECK_CREDENTIALS" SCONAME="R_AUTH_OK" VERSION="1" LANGU="E" DESCRIPT="Ok = &apos;X&apos;, not Ok = &apos; &apos;" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="CHAR1"/>
   <source>METHOD check_credentials.

  &quot; Elementary
  DATA: l_id       TYPE bapiusw01-objid,
        l_type     TYPE bapiusw01-objtype,
        l_password TYPE bapiuid-password,
        l_rc       TYPE bapiuid-rcode.

  l_id       = i_id.
  l_type     = i_objtype.
  l_password = i_password.

  TRANSLATE l_id   TO UPPER CASE.
  TRANSLATE l_type TO UPPER CASE.
  TRANSLATE l_password TO UPPER CASE.

  CLEAR me-&gt;auth_ok.

  CALL FUNCTION &apos;WWW_USER_AUTHORITY&apos;
    EXPORTING
      id       = l_id
      idtype   = l_type
      password = l_password
      action   = &apos;39&apos; &quot; CHECK
    IMPORTING
      ret      = l_rc.

  IF NOT l_rc = &apos;00&apos;.

    &quot; Authentication failed. User and/or password is invalid
    me-&gt;reason = text-001.

  ELSE.

    &quot; Set user status as Authenticated
    me-&gt;auth_ok = &apos;X&apos;.

  ENDIF.

  r_auth_ok = me-&gt;auth_ok.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_USW" CMPNAME="CHECK_PASSWORD_RESET_RULES" VERSION="1" LANGU="E" DESCRIPT="Check password reset rules" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USW" CMPNAME="CHECK_PASSWORD_RESET_RULES" SCONAME="I_PWD" VERSION="1" LANGU="E" DESCRIPT="Senha atual" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="CHECK_PASSWORD_RESET_RULES" SCONAME="I_PWD_NEW" VERSION="1" LANGU="E" DESCRIPT="Nova senha" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="CHECK_PASSWORD_RESET_RULES" SCONAME="I_PWD_CONF" VERSION="1" LANGU="E" DESCRIPT="Confirmação da nova senha" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="CHECK_PASSWORD_RESET_RULES" SCONAME="I_UUID" VERSION="1" LANGU="E" DESCRIPT="Reset token" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="CHECK_PASSWORD_RESET_RULES" SCONAME="R_OK" VERSION="1" LANGU="E" DESCRIPT="Nova senha OK = &apos;X&apos;" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="CHAR1"/>
   <source>METHOD check_password_reset_rules.

  r_ok = &apos;X&apos;.

  IF i_uuid IS INITIAL.

    IF i_pwd = i_pwd_new.
      CLEAR r_ok.
      &quot; The new password cannot be equal to the current one
      me-&gt;reason = text-008.
    ENDIF.

  ELSE.

    IF i_pwd_new  IS INITIAL OR
       i_pwd_conf IS INITIAL.

      CLEAR r_ok.

      &quot; Please inform the new password and its confirmation
      me-&gt;reason = text-011.

    ELSE.

      IF i_pwd_new &lt;&gt; i_pwd_conf.

        CLEAR r_ok.

        &quot; The new password and its confirmation are not equal
        me-&gt;reason = text-012.

      ENDIF.

    ENDIF.

  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_USW" CMPNAME="CHECK_TOKEN" VERSION="1" LANGU="E" DESCRIPT="User authentication by token" EXPOSURE="2" STATE="1" EDITORDER="12 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USW" CMPNAME="CHECK_TOKEN" SCONAME="I_ID" VERSION="1" LANGU="E" DESCRIPT="Internet user ID" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="CHECK_TOKEN" SCONAME="I_OBJTYPE" VERSION="1" LANGU="E" DESCRIPT="Internet user Business Object type" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="CHECK_TOKEN" SCONAME="I_APP" VERSION="1" LANGU="E" DESCRIPT="App ID" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="CHECK_TOKEN" SCONAME="I_TOKEN" VERSION="1" LANGU="E" DESCRIPT="Authentication token" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="CHECK_TOKEN" SCONAME="I_TOKEN_CO" VERSION="1" LANGU="E" DESCRIPT="Token content" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="CHECK_TOKEN" SCONAME="I_T_NVP" VERSION="1" LANGU="E" DESCRIPT="Name/value pairs table" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TIHTTPNVP"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="CHECK_TOKEN" SCONAME="R_TOKEN_OK" VERSION="1" LANGU="E" DESCRIPT="Ok = &apos;X&apos;, not Ok = &apos; &apos;" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ABAP_BOOL"/>
   <source>METHOD check_token.

  FIELD-SYMBOLS: &lt;lfs&gt;     TYPE string,
                 &lt;lfs_nvp&gt; LIKE LINE OF i_t_nvp.

  DATA: lt_token_co TYPE STANDARD TABLE OF string,
        lt_nvp      LIKE i_t_nvp.

  DATA: ls_uswua    TYPE ztbuswua,
        ls_nvp      LIKE LINE OF i_t_nvp.

  DATA: l_id        TYPE ztbuswua-objid,
        l_objtype   TYPE ztbuswua-objtype,
        l_app       TYPE ztbuswua-appid,
        l_pkey      TYPE ztbuswua-pkey,
        l_hash      TYPE hash160,
        l_token     TYPE hash160,
        l_content   TYPE string,
        l_name      TYPE string.

  l_objtype = i_objtype.
  l_id   = i_id.

  TRANSLATE l_objtype TO UPPER CASE.
  TRANSLATE l_id TO UPPER CASE.

  SELECT SINGLE * FROM ztbuswua
    INTO ls_uswua
    WHERE objtype = l_objtype AND
          objid   = l_id AND
          ( appid = l_app OR appid = &apos;*&apos; ).

  SPLIT i_token_co AT &apos;|&apos; INTO TABLE lt_token_co.

  LOOP AT lt_token_co ASSIGNING &lt;lfs&gt;.
    TRANSLATE &lt;lfs&gt; TO UPPER CASE.
  ENDLOOP.

  UNASSIGN &lt;lfs&gt;.

  lt_nvp[] = i_t_nvp[].

  LOOP AT lt_nvp ASSIGNING &lt;lfs_nvp&gt;.
    TRANSLATE &lt;lfs_nvp&gt;-name TO UPPER CASE.
  ENDLOOP.

  UNASSIGN &lt;lfs_nvp&gt;.

  LOOP AT lt_token_co INTO l_name.

    READ TABLE lt_nvp INTO ls_nvp WITH TABLE KEY name = l_name.

    IF sy-subrc = 0.
      CONCATENATE l_content ls_nvp-value INTO l_content.
    ENDIF.

  ENDLOOP.

  CONCATENATE l_content ls_uswua-pkey INTO l_content.

  CALL FUNCTION &apos;CALCULATE_HASH_FOR_CHAR&apos;
    EXPORTING
*     ALG            = &apos;SHA1&apos;
      data           = l_content
    IMPORTING
      hash           = l_hash
    EXCEPTIONS
      unknown_alg    = 1
      param_error    = 2
      internal_error = 3.

  l_token = i_token.

  TRANSLATE l_token TO UPPER CASE.

  IF l_token = l_hash.

    r_token_ok = &apos;X&apos;.

    &quot; Set user status as Authenticated
    me-&gt;auth_ok = &apos;X&apos;.

  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_USW" CMPNAME="CREATE_RESET_PASSWORD_REQUEST" VERSION="1" LANGU="E" DESCRIPT="Create password reset request" EXPOSURE="2" STATE="1" EDITORDER="11 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USW" CMPNAME="CREATE_RESET_PASSWORD_REQUEST" SCONAME="I_ID" VERSION="1" LANGU="E" DESCRIPT="ID usuário no mestre de usuários internet" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BAPIUSW01-OBJID"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="CREATE_RESET_PASSWORD_REQUEST" SCONAME="I_OBJTYPE" VERSION="1" LANGU="E" DESCRIPT="Tipo de objeto" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BAPIUSW01-OBJTYPE" PARVALUE="&apos;BUS1008&apos;"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="CREATE_RESET_PASSWORD_REQUEST" SCONAME="R_RESET_OK" VERSION="1" LANGU="E" DESCRIPT="Solicitação OK = &apos;X&apos;" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="CHAR1"/>
   <source>METHOD create_reset_password_request.

  &quot; Structures
  DATA: ls_ztbuswpr TYPE ztbuswpr.

  &quot; Elementary
  DATA: l_uuid      TYPE string,
        l_email_ok  TYPE char1.

  ls_ztbuswpr-objtype = i_objtype.
  ls_ztbuswpr-objid   = i_id.
                                                           &quot;  702+
*  ls_ztbuswpr-uuid    = cl_system_uuid=&gt;create_uuid_x16_static( ).

  CALL FUNCTION &apos;GUID_CREATE&apos;
    IMPORTING
      ev_guid_16 = ls_ztbuswpr-uuid.

  ls_ztbuswpr-erdat   = sy-datum.
  ls_ztbuswpr-erzet   = sy-uzeit.
  ls_ztbuswpr-loekz   = &apos;&apos;.

  TRANSLATE ls_ztbuswpr-objid TO UPPER CASE.

  INSERT ztbuswpr FROM ls_ztbuswpr.

  IF sy-subrc = 0.

    l_uuid = ls_ztbuswpr-uuid.

    CALL METHOD me-&gt;send_email_reset_link
      EXPORTING
        i_uuid     = l_uuid
        i_id       = i_id
      IMPORTING
        r_email_ok = l_email_ok.

    IF NOT l_email_ok IS INITIAL.
      r_reset_ok = &apos;X&apos;.
    ENDIF.

  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_USW" CMPNAME="EXEC_USER_SWITCH" VERSION="1" LANGU="E" DESCRIPT="Execute User Switch" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USW" CMPNAME="EXEC_USER_SWITCH" SCONAME="I_ID" VERSION="1" LANGU="E" DESCRIPT="ID Usuário Internet" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="EXEC_USER_SWITCH" SCONAME="I_OBJTYPE" VERSION="1" LANGU="E" DESCRIPT="Tipo de objeto" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="EXEC_USER_SWITCH" SCONAME="I_USERNAME" VERSION="1" LANGU="E" DESCRIPT="Nome do usuário no mestre de usuários" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="XUBNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="EXEC_USER_SWITCH" SCONAME="I_PASSWORD" VERSION="1" LANGU="E" DESCRIPT="Senha de um usuário SAP" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BAPIPWD" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="EXEC_USER_SWITCH" SCONAME="R_SWITCH_OK" VERSION="1" LANGU="E" DESCRIPT="Ok = &apos;X&apos;, not Ok = &apos; &apos;" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="CHAR1"/>
   <source>METHOD exec_user_switch.

  &quot; Internal tables
  DATA: lt_return TYPE STANDARD TABLE OF bapiret2.

  &quot; Elementary
  DATA: l_user      TYPE xubname,
        l_pwd       TYPE wwwpass,
        l_password  TYPE bapipwd,
        l_id        TYPE ztbuswua-objid,
        l_objtype   TYPE ztbuswua-objtype,
        l_refuser   TYPE ztbuswua-refuser.

  IF ( NOT i_id IS INITIAL ) AND ( NOT i_objtype IS INITIAL ).

    &quot; Execute the user switch only if the user is already authenticated
    CHECK me-&gt;auth_ok = &apos;X&apos;.

    l_id      = i_id.
    l_objtype = i_objtype.

    TRANSLATE l_id TO UPPER CASE.
    TRANSLATE l_objtype TO UPPER CASE.

    CALL METHOD me-&gt;get_dialog_user
      EXPORTING
        i_objtype = l_objtype
        i_objid   = l_id
      IMPORTING
        e_bname   = l_user
        e_pwd     = l_pwd
        e_refuser = l_refuser.

    IF NOT l_refuser IS INITIAL.

      r_switch_ok = &apos;X&apos;.

      EXIT.

    ENDIF.

    IF ( NOT l_user IS INITIAL ) AND ( NOT l_pwd IS INITIAL ).

      l_password = l_pwd.

      CALL FUNCTION &apos;SUSR_INTERNET_USERSWITCH&apos;
        EXPORTING
          username                    = l_user
          password                    = l_password
        TABLES
          return                      = lt_return
        EXCEPTIONS
          current_user_not_servicetyp = 1
          more_than_one_mode          = 2
          internal_error              = 3
          OTHERS                      = 4.

      IF sy-subrc = 0.

        r_switch_ok = &apos;X&apos;.

      ENDIF.

    ENDIF.

  ELSEIF ( NOT i_username IS INITIAL ) AND ( NOT i_password IS INITIAL ).

    CALL FUNCTION &apos;SUSR_INTERNET_USERSWITCH&apos;
      EXPORTING
        username                    = i_username
        password                    = i_password
      TABLES
        return                      = lt_return
      EXCEPTIONS
        current_user_not_servicetyp = 1
        more_than_one_mode          = 2
        internal_error              = 3
        OTHERS                      = 4.

    IF sy-subrc = 0.

      r_switch_ok = &apos;X&apos;.

    ENDIF.

  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_USW" CMPNAME="GET_DIALOG_USER" VERSION="1" LANGU="E" DESCRIPT="Retrieve dialog user from user switch assignment" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USW" CMPNAME="GET_DIALOG_USER" SCONAME="I_OBJTYPE" VERSION="1" LANGU="E" DESCRIPT="Tipo de objeto" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="OJ_NAME"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="GET_DIALOG_USER" SCONAME="I_OBJID" VERSION="1" LANGU="E" DESCRIPT="ID usuário no mestre de usuários internet" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="WWWOBJID"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="GET_DIALOG_USER" SCONAME="E_BNAME" VERSION="1" LANGU="E" DESCRIPT="Nome do usuário no mestre de usuários" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="XUBNAME"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="GET_DIALOG_USER" SCONAME="E_PWD" VERSION="1" LANGU="E" DESCRIPT="Senha p/usuário de internet" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="WWWPASS"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="GET_DIALOG_USER" SCONAME="E_REFUSER" VERSION="1" LANGU="E" DESCRIPT="REST API  - Flag ref. user only" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="ZDE_RESTAPI_REFUSRONLY"/>
   <source>METHOD get_dialog_user.

  DATA: ls_ztbuswdu  TYPE ztbuswdu, &quot; Dialog Users
        ls_ztbuswua  TYPE ztbuswua. &quot; User Assignment

  DATA: l_pwdbase64  TYPE sld_b64pwd,
        l_password   TYPE sld_password.

  SELECT SINGLE * FROM ztbuswua
    INTO ls_ztbuswua
    WHERE objtype = i_objtype AND
          objid   = i_objid.

  IF sy-subrc = 0.

    IF e_bname IS REQUESTED.
      e_bname = ls_ztbuswua-bname.
    ENDIF.

    IF e_refuser IS REQUESTED.
      e_refuser = ls_ztbuswua-refuser.
    ENDIF.

    IF e_pwd IS REQUESTED.

      SELECT SINGLE bname password
        FROM ztbuswdu
        INTO CORRESPONDING FIELDS OF ls_ztbuswdu
        WHERE bname = ls_ztbuswua-bname.

      IF sy-subrc = 0 AND NOT ls_ztbuswdu-password IS INITIAL.

        l_pwdbase64 = ls_ztbuswdu-password.

        CALL FUNCTION &apos;DECODE_SLDPWD_BASE64&apos;
          EXPORTING
            pwdbase64 = l_pwdbase64
          IMPORTING
            password  = l_password.

        e_pwd = l_password.

      ENDIF.

    ENDIF.

  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_USW" CMPNAME="GET_INSTANCE" VERSION="1" LANGU="E" DESCRIPT="Return instance (Singleton)" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USW" CMPNAME="GET_INSTANCE" SCONAME="R_REF" VERSION="1" LANGU="E" DESCRIPT="User Switch" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_USW"/>
   <source>METHOD GET_INSTANCE.
  IF NOT ref IS BOUND.
    CREATE OBJECT ref.
  ENDIF.
  r_ref = ref.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_USW" CMPNAME="GET_INTERNET_USER" VERSION="1" LANGU="E" DESCRIPT="Retrieve internet user data" EXPOSURE="0" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USW" CMPNAME="GET_INTERNET_USER" SCONAME="I_OBJTYPE" VERSION="1" LANGU="E" DESCRIPT="Tipo de objeto" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BAPIUSW01-OBJTYPE" PARVALUE="&apos;BUS1008&apos;"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="GET_INTERNET_USER" SCONAME="I_ID" VERSION="1" LANGU="E" DESCRIPT="ID usuário no mestre de usuários internet" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BAPIUSW01-OBJID"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="GET_INTERNET_USER" SCONAME="E_NAME" VERSION="1" LANGU="E" DESCRIPT="Nome" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="GET_INTERNET_USER" SCONAME="E_EMAIL" VERSION="1" LANGU="E" DESCRIPT="Endereço de e-mail" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <source>METHOD get_internet_user.

  &quot; Internal tables
  DATA: lt_adrc TYPE STANDARD TABLE OF adrc,
        lt_adr6 TYPE STANDARD TABLE OF adr6.

  &quot; Structures
  DATA: ls_adrc TYPE adrc,
        ls_adr6 TYPE adr6.

  &quot; Elementary
  DATA: l_addrnumber TYPE ztbuswiu-addrnumber.

  SELECT SINGLE addrnumber FROM ztbuswiu
    INTO l_addrnumber
    WHERE objtype = i_objtype AND
          objid   = i_id.

  IF e_name IS REQUESTED.

    SELECT addrnumber name1 name2 FROM adrc
      INTO CORRESPONDING FIELDS OF TABLE lt_adrc
      WHERE addrnumber = l_addrnumber AND
            date_from &lt;= sy-datum AND
            nation = &apos; &apos; AND
            date_to &gt;= sy-datum.

    IF sy-subrc = 0.
      READ TABLE lt_adrc INTO ls_adrc INDEX 1.
      CONCATENATE ls_adrc-name1 ls_adrc-name2 INTO e_name SEPARATED BY space.
    ENDIF.

  ENDIF.

  IF e_email IS REQUESTED.

    SELECT addrnumber smtp_addr FROM adr6
      INTO CORRESPONDING FIELDS OF TABLE lt_adr6
      WHERE addrnumber = l_addrnumber AND
            date_from &lt;= sy-datum.

    IF sy-subrc = 0.
      READ TABLE lt_adr6 INTO ls_adr6 INDEX 1.
      e_email = ls_adr6-smtp_addr.
    ENDIF.

  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_USW" CMPNAME="GET_INTERNET_USER_STATUS" VERSION="1" LANGU="E" DESCRIPT="Retorna internet user status" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USW" CMPNAME="GET_INTERNET_USER_STATUS" SCONAME="I_ID" VERSION="1" LANGU="E" DESCRIPT="ID usuário no mestre de usuários internet" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BAPIUSW01-OBJID"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="GET_INTERNET_USER_STATUS" SCONAME="I_OBJTYPE" VERSION="1" LANGU="E" DESCRIPT="Tipo de objeto" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BAPIUSW01-OBJTYPE" PARVALUE="&apos;BUS1008&apos;"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="GET_INTERNET_USER_STATUS" SCONAME="R_RC" VERSION="1" LANGU="E" DESCRIPT="Código de retorno de instruções ABAP" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SYSUBRC"/>
   <source>METHOD GET_INTERNET_USER_STATUS.

  DATA: lt_statusinfo TYPE STANDARD TABLE OF bapiuswsta,
        ls_statusinfo TYPE bapiuswsta.

  DATA: l_ret TYPE bapiuid-rcode.

  r_rc = 0.

  CALL FUNCTION &apos;WWW_USER_AUTHORITY&apos;
    EXPORTING
      id         = i_id
      idtype     = i_objtype
      action     = &apos;03&apos;
    IMPORTING
      ret        = l_ret
    TABLES
      statusinfo = lt_statusinfo.

  IF l_ret = &apos;10&apos;.

    r_rc = 4. &quot; User does not exist
    EXIT.

  ENDIF.

  IF NOT lt_statusinfo[] IS INITIAL.

    READ TABLE lt_statusinfo INTO ls_statusinfo INDEX 1.

    IF NOT ls_statusinfo-state IS INITIAL.

      r_rc = 8. &quot; User is locked

    ENDIF.

  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_USW" CMPNAME="GET_USERID_COOKIE" VERSION="1" LANGU="E" DESCRIPT="Retrieve server cookie" EXPOSURE="2" STATE="1" EDITORDER="10 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USW" CMPNAME="GET_USERID_COOKIE" SCONAME="I_SESSION_ID" VERSION="1" LANGU="E" DESCRIPT="Id Sessão" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CSEQUENCE"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="GET_USERID_COOKIE" SCONAME="I_APP" VERSION="1" LANGU="E" DESCRIPT="Id Aplicação" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CSEQUENCE"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="GET_USERID_COOKIE" SCONAME="E_USERID" VERSION="1" LANGU="E" DESCRIPT="Id Usuário Internet" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="CSEQUENCE"/>
   <source>METHOD get_userid_cookie.

  DATA: l_objid TYPE wwwobjid.

  CALL METHOD cl_bsp_server_side_cookie=&gt;get_server_cookie
    EXPORTING
      name                  = &apos;INTERNET_USER_ID&apos;
      application_name      = i_app
      application_namespace = &apos;ZREST&apos;
      username              = sy-uname
      session_id            = i_session_id
      data_name             = &apos;L_OBJID&apos;
    CHANGING
      data_value            = l_objid.

  e_userid = l_objid.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_USW" CMPNAME="INTERNET_USER_NEW_PWD" VERSION="1" LANGU="E" DESCRIPT="Create/Change internet user password" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USW" CMPNAME="INTERNET_USER_NEW_PWD" SCONAME="I_ID" VERSION="1" LANGU="E" DESCRIPT="ID usuário no mestre de usuários internet" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BAPIUSW01-OBJID"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="INTERNET_USER_NEW_PWD" SCONAME="I_PWD" VERSION="1" LANGU="E" DESCRIPT="Nova senha" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="INTERNET_USER_NEW_PWD" SCONAME="I_OBJTYPE" VERSION="1" LANGU="E" DESCRIPT="Tipo de objeto" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BAPIUSW01-OBJTYPE" PARVALUE="&apos;BUS1008&apos;"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="INTERNET_USER_NEW_PWD" SCONAME="E_RC" VERSION="1" LANGU="E" DESCRIPT="Código de retorno de instruções ABAP" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="SYSUBRC"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="INTERNET_USER_NEW_PWD" SCONAME="E_PWD" VERSION="1" LANGU="E" DESCRIPT="Senha gerada" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <source>METHOD INTERNET_USER_NEW_PWD.

  DATA: l_rc           TYPE sysubrc,
        l_ret          TYPE bapiuid-rcode,
        l_init_pwd     TYPE bapiuid-password,
        l_alphabet(36) TYPE c,
        l_new_pwd      TYPE bapiuid-password,
        l_newvalidto   TYPE bapiusw01-validto.

  CALL METHOD me-&gt;get_internet_user_status
    EXPORTING
      i_id      = i_id
      i_objtype = i_objtype
    RECEIVING
      r_rc      = l_rc.

  IF l_rc = 4. &quot; User does not exist

    CLEAR l_ret.

    CALL FUNCTION &apos;WWW_USER_AUTHORITY&apos;
      EXPORTING
        id     = i_id
        idtype = i_objtype
        action = &apos;01&apos;      &quot; Create user
      IMPORTING
        ret    = l_ret.

    IF NOT l_ret = &apos;00&apos;.
      e_rc = 4.
      EXIT.
    ENDIF.

*    CLEAR l_ret.
*
*    CALL FUNCTION &apos;WWW_USER_AUTHORITY&apos;
*      EXPORTING
*        id           = i_id
*        idtype       = i_objtype
*        action       = &apos;51&apos;  &quot; Reset password
*      IMPORTING
*        ret          = l_ret
*        initpassword = l_init_pwd.
*
*    IF NOT l_ret = &apos;00&apos;.
*      e_rc = 4.
*      EXIT.
*    ENDIF.

    IF i_pwd IS INITIAL.

      CONCATENATE sy-abcde &apos;0123456789&apos; INTO l_alphabet.

      CALL FUNCTION &apos;RSEC_GENERATE_PASSWORD&apos;
        EXPORTING
          alphabet             = l_alphabet
          alphabet_length      = 36
          downwards_compatible = &apos;X&apos;
          output_length        = 8
        IMPORTING
          output               = l_new_pwd
        EXCEPTIONS
          some_error           = 1
          OTHERS               = 2.

      IF sy-subrc &lt;&gt; 0.
        e_rc = 4.
        EXIT.
      ENDIF.

    ELSE.

      l_new_pwd = i_pwd.

    ENDIF.

    CLEAR l_ret.

    CALL FUNCTION &apos;WWW_USER_AUTHORITY&apos;
      EXPORTING
        id           = i_id
        idtype       = i_objtype
        password     = l_init_pwd
        newpassword  = l_new_pwd
        veripassword = l_new_pwd
        action       = &apos;23&apos; &quot; Maintain password
      IMPORTING
        ret          = l_ret.

    IF NOT l_ret = &apos;00&apos;.
      e_rc = 4.
      EXIT.
    ENDIF.

    e_rc = 0.
    e_pwd = l_new_pwd.

  ELSE.

    CLEAR l_ret.

    CALL FUNCTION &apos;WWW_USER_AUTHORITY&apos;
      EXPORTING
        id     = i_id
        idtype = i_objtype
        action = &apos;45&apos; &quot;Unlock user
      IMPORTING
        ret    = l_ret.

    IF NOT l_ret IS INITIAL.
      e_rc = 4.
      EXIT.
    ENDIF.

    l_newvalidto = &apos;99991231&apos;.

    CLEAR l_ret.

    CALL FUNCTION &apos;WWW_USER_AUTHORITY&apos;
      EXPORTING
        id         = i_id
        idtype     = i_objtype
        action     = &apos;11&apos; &quot;Update VALIDTO
        newvalidto = l_newvalidto
      IMPORTING
        ret        = l_ret.

    IF NOT l_ret = &apos;00&apos;.
      e_rc = 4.
      EXIT.
    ENDIF.

*    CALL FUNCTION &apos;WWW_USER_AUTHORITY&apos;
*      EXPORTING
*        id           = i_id
*        idtype       = i_objtype
*        action       = &apos;51&apos; &quot;Reset password
*      IMPORTING
*        ret          = l_ret
*        initpassword = l_init_pwd.
*
*    IF NOT l_ret = &apos;00&apos;.
*      e_rc = 4.
*      EXIT.
*    ENDIF.

    IF i_pwd IS INITIAL.

      CONCATENATE sy-abcde &apos;0123456789&apos; INTO l_alphabet.

      CALL FUNCTION &apos;RSEC_GENERATE_PASSWORD&apos;
        EXPORTING
          alphabet             = l_alphabet
          alphabet_length      = 36
          downwards_compatible = &apos;X&apos;
          output_length        = 8
        IMPORTING
          output               = l_new_pwd
        EXCEPTIONS
          some_error           = 1
          OTHERS               = 2.

      IF sy-subrc &lt;&gt; 0.
        e_rc = 4.
        EXIT.
      ENDIF.

    ELSE.

      l_new_pwd = i_pwd.

    ENDIF.

    CLEAR l_ret.

    CALL FUNCTION &apos;WWW_USER_AUTHORITY&apos;
      EXPORTING
        id           = i_id
        idtype       = i_objtype
        password     = l_init_pwd
        newpassword  = l_new_pwd
        veripassword = l_new_pwd
        action       = &apos;23&apos;      &quot; Maintain password
      IMPORTING
        ret          = l_ret.

    IF NOT l_ret = &apos;00&apos;.
      e_rc = 4.
      EXIT.
    ENDIF.

    e_rc = 0.
    e_pwd = l_new_pwd.

  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_USW" CMPNAME="LOCK_INTERNET_USER" VERSION="1" LANGU="E" DESCRIPT="Lock internet user" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USW" CMPNAME="LOCK_INTERNET_USER" SCONAME="I_ID" VERSION="1" LANGU="E" DESCRIPT="ID usuário no mestre de usuários internet" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BAPIUSW01-OBJID"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="LOCK_INTERNET_USER" SCONAME="I_OBJTYPE" VERSION="1" LANGU="E" DESCRIPT="Tipo de objeto" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BAPIUSW01-OBJTYPE" PARVALUE="&apos;BUS1008&apos;"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="LOCK_INTERNET_USER" SCONAME="R_RC" VERSION="1" LANGU="E" DESCRIPT="Código de retorno de instruções ABAP" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SYSUBRC"/>
   <source>method LOCK_INTERNET_USER.

  DATA: l_ret TYPE bapiuid-rcode.

  CALL FUNCTION &apos;WWW_USER_AUTHORITY&apos;
    EXPORTING
      id     = i_id
      idtype = i_objtype
      action = &apos;05&apos; &quot;Lock user
    IMPORTING
      ret    = l_ret.

  IF NOT l_ret IS INITIAL.
    r_rc = 4.
  ENDIF.

endmethod.</source>
  </method>
  <method CLSNAME="ZCL_USW" CMPNAME="RESET_PWD" VERSION="1" LANGU="E" DESCRIPT="Reset internet user password" EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USW" CMPNAME="RESET_PWD" SCONAME="I_ID" VERSION="1" LANGU="E" DESCRIPT="ID usuário no mestre de usuários internet" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BAPIUSW01-OBJID"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="RESET_PWD" SCONAME="I_PWD" VERSION="1" LANGU="E" DESCRIPT="Nova senha" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="RESET_PWD" SCONAME="I_OBJTYPE" VERSION="1" LANGU="E" DESCRIPT="Tipo de objeto" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BAPIUSW01-OBJTYPE" PARVALUE="&apos;BUS1008&apos;"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="RESET_PWD" SCONAME="R_RESET_OK" VERSION="1" LANGU="E" DESCRIPT="Código de retorno de instruções ABAP" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="SYSUBRC"/>
   <source>METHOD reset_pwd.

  DATA: l_rc  TYPE sysubrc.

  CALL METHOD me-&gt;internet_user_new_pwd
    EXPORTING
      i_objtype = i_objtype
      i_id      = i_id
      i_pwd     = i_pwd
    IMPORTING
      e_rc      = l_rc.

  IF l_rc IS INITIAL.
    r_reset_ok = &apos;X&apos;.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_USW" CMPNAME="SEND_EMAIL_RESET_LINK" VERSION="1" LANGU="E" DESCRIPT="Send email with the password reset request link" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USW" CMPNAME="SEND_EMAIL_RESET_LINK" SCONAME="I_UUID" VERSION="1" LANGU="E" DESCRIPT="UUID de reinicialização de senha" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="SEND_EMAIL_RESET_LINK" SCONAME="I_OBJTYPE" VERSION="1" LANGU="E" DESCRIPT="Tipo de objeto" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BAPIUSW01-OBJTYPE" PARVALUE="&apos;BUS1008&apos;"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="SEND_EMAIL_RESET_LINK" SCONAME="I_ID" VERSION="1" LANGU="E" DESCRIPT="ID usuário no mestre de usuários internet" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BAPIUSW01-OBJID"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="SEND_EMAIL_RESET_LINK" SCONAME="R_EMAIL_OK" VERSION="1" LANGU="E" DESCRIPT="E-mail enviado = &apos;X&apos;" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="CHAR1"/>
   <source>METHOD send_email_reset_link.

  &quot; Objects
  DATA: lo_cx_root     TYPE REF TO cx_root,
        lo_cx_bcs      TYPE REF TO cx_bcs,
        lo_bcs         TYPE REF TO cl_bcs,
        lo_sender      TYPE REF TO if_sender_bcs,
        lo_recipient   TYPE REF TO if_recipient_bcs,
        lo_document    TYPE REF TO cl_document_bcs.

  &quot; Internal tables
  DATA: lt_body        TYPE bcsy_text.

  &quot; Elementary
  DATA: l_objtype	     TYPE oj_name,
        l_objid        TYPE wwwobjid,
        l_email	       TYPE string,
        l_name         TYPE string,
        l_subject      TYPE so_obj_des,
        l_raw          TYPE char03 VALUE &apos;HTM&apos;,
        l_sender       TYPE adr6-smtp_addr,
        l_recipient    TYPE adr6-smtp_addr,
        l_sent_2_all   TYPE os_boolean,
        l_line(255)    TYPE c,
        l_url          TYPE soli-line.

  l_objid   = i_id.
  l_objtype = i_objtype.

  TRANSLATE l_objid   TO UPPER CASE.
  TRANSLATE l_objtype TO UPPER CASE.

  CALL METHOD me-&gt;get_internet_user
    EXPORTING
      i_objtype = l_objtype
      i_id      = l_objid
    IMPORTING
      e_name    = l_name
      e_email   = l_email.

  l_recipient = l_email.

  CHECK l_recipient IS NOT INITIAL.

  &quot; TODO: Define here the URL of the reset form page
  CASE sy-sysid.
    WHEN &apos;DEV&apos;. &quot; TODO: Change it to your system SID
      l_url = &apos;http://dev.yourcompany.com/yourapp/reset.html&apos;.
    WHEN &apos;QAS&apos;. &quot; TODO: Change it to your system SID
      l_url = &apos;http://qas.yourcompany.com/yourapp/reset.html&apos;.
    WHEN &apos;PRD&apos;. &quot; TODO: Change it to your system SID
      l_url = &apos;https://yourcompany.com/yourapp/reset.html&apos;.
    WHEN OTHERS.
      l_url = &apos;#&apos;.
  ENDCASE.

  IF l_url &lt;&gt; &apos;#&apos;.
    CONCATENATE l_url &apos;?usr=&apos; i_id &apos;&amp;uuid=&apos; i_uuid INTO l_url.
  ENDIF.

  CONCATENATE &apos;&lt;a href=&quot;&apos; l_url &apos;&quot;&gt;&apos; text-009 &apos;&lt;/a&gt;&apos; INTO l_url.

  TRY.

      lo_bcs = cl_bcs=&gt;create_persistent( ).

      l_sender = &apos;helpdesk@yourcompany.com&apos;.

      lo_sender = cl_cam_address_bcs=&gt;create_internet_address( l_sender ).

      CALL METHOD lo_bcs-&gt;set_sender
        EXPORTING
          i_sender = lo_sender.

      lo_recipient = cl_cam_address_bcs=&gt;create_internet_address( l_recipient ).

      CALL METHOD lo_bcs-&gt;add_recipient
        EXPORTING
          i_recipient = lo_recipient
          i_express   = &apos;X&apos;.

      APPEND &apos;&lt;html&gt;&apos; TO lt_body.
      APPEND &apos;&lt;body&gt;&apos; TO lt_body.

      IF l_name IS INITIAL.
        l_line = text-002.        &quot; Dear user,
      ELSE.
        CONCATENATE text-003 l_name &apos;,&apos; INTO l_line SEPARATED BY space.
      ENDIF.

      APPEND l_line TO lt_body.

      APPEND &apos;&lt;br&gt;&apos; TO lt_body.

      CLEAR l_line.

      &quot; Please find below the password reset link.
      l_line = text-004.

      APPEND l_line TO lt_body.

      APPEND &apos;&lt;br&gt;&lt;br&gt;&apos; TO lt_body.

      APPEND l_url TO lt_body.

      APPEND &apos;&lt;br&gt;&lt;br&gt;&apos; TO lt_body.

      l_line = text-005.        &quot; Sincerely,
      APPEND l_line TO lt_body.

      APPEND &apos;&lt;br&gt;&apos; TO lt_body.

      l_line = text-006.        &quot; Helpdesk Team
      APPEND l_line TO lt_body.

      APPEND &apos;&lt;/body&gt;&apos; TO lt_body.
      APPEND &apos;&lt;/html&gt;&apos; TO lt_body.

      l_subject = text-007.     &quot;Password reset request

      lo_document = cl_document_bcs=&gt;create_document(
                      i_type    = l_raw
                      i_text    = lt_body
                      i_subject = l_subject ).

      &quot; Add document to send request
      CALL METHOD lo_bcs-&gt;set_document( lo_document ).

      &quot; Send email
      CALL METHOD lo_bcs-&gt;send(
        EXPORTING
          i_with_error_screen = &apos;X&apos;
        RECEIVING
          result              = l_sent_2_all ).

      IF NOT l_sent_2_all = &apos;X&apos;.
        EXIT.
      ENDIF.

      &quot; Commit to send email
      COMMIT WORK.

      r_email_ok = &apos;X&apos;.

      &quot; Exception handling
    CATCH cx_bcs INTO lo_cx_bcs.

      EXIT.

      &quot; Exception handling
    CATCH cx_root INTO lo_cx_root.

      EXIT.

  ENDTRY.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_USW" CMPNAME="SET_USERID_COOKIE" VERSION="1" LANGU="E" DESCRIPT="Create server cookie" EXPOSURE="2" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USW" CMPNAME="SET_USERID_COOKIE" SCONAME="I_SESSION_ID" VERSION="1" LANGU="E" DESCRIPT="Id Sessão" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CSEQUENCE"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="SET_USERID_COOKIE" SCONAME="I_USERID" VERSION="1" LANGU="E" DESCRIPT="Id Usuário Internet" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CSEQUENCE"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="SET_USERID_COOKIE" SCONAME="I_APP" VERSION="1" LANGU="E" DESCRIPT="Id Aplicação" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CSEQUENCE"/>
   <source>METHOD set_userid_cookie.

  DATA: l_objid TYPE wwwobjid.

  l_objid = i_userid.

  CALL METHOD cl_bsp_server_side_cookie=&gt;set_server_cookie
    EXPORTING
      name                  = &apos;INTERNET_USER_ID&apos;
      application_name      = i_app
      application_namespace = &apos;ZREST&apos;
      username              = sy-uname
      session_id            = i_session_id
      data_value            = l_objid
      data_name             = &apos;L_OBJID&apos;
      expiry_time_rel       = 3600.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_USW" CMPNAME="UNLOCK_INTERNET_USER" VERSION="1" LANGU="E" DESCRIPT="Unlock internet user" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USW" CMPNAME="UNLOCK_INTERNET_USER" SCONAME="I_ID" VERSION="1" LANGU="E" DESCRIPT="ID usuário no mestre de usuários internet" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BAPIUSW01-OBJID"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="UNLOCK_INTERNET_USER" SCONAME="I_OBJTYPE" VERSION="1" LANGU="E" DESCRIPT="Tipo de objeto" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BAPIUSW01-OBJTYPE" PARVALUE="&apos;BUS1008&apos;"/>
   <parameter CLSNAME="ZCL_USW" CMPNAME="UNLOCK_INTERNET_USER" SCONAME="R_RC" VERSION="1" LANGU="E" DESCRIPT="Código de retorno de instruções ABAP" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SYSUBRC"/>
   <source>METHOD UNLOCK_INTERNET_USER.

  DATA: l_ret TYPE bapiuid-rcode.

  CALL FUNCTION &apos;WWW_USER_AUTHORITY&apos;
    EXPORTING
      id     = i_id
      idtype = i_objtype
      action = &apos;45&apos; &quot;Unlock user
    IMPORTING
      ret    = l_ret.

  IF NOT l_ret IS INITIAL.
    r_rc = 4.
  ENDIF.

ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_USW_UTILS" VERSION="1" LANGU="E" DESCRIPT="Utilitários" CATEGORY="00" EXPOSURE="0" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool>
   <language SPRAS="E"/>
  </textPool>
  <attribute CLSNAME="ZCL_USW_UTILS" CMPNAME="REF" VERSION="1" LANGU="E" DESCRIPT="Utilitários" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_USW_UTILS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_USW_UTILS" CMPNAME="GET_INSTANCE" VERSION="1" LANGU="E" DESCRIPT="Return instance (Singleton)" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USW_UTILS" CMPNAME="GET_INSTANCE" SCONAME="R_REF" VERSION="1" LANGU="E" DESCRIPT="Utilitários" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_USW_UTILS"/>
   <source>METHOD GET_INSTANCE.

  IF NOT ref IS BOUND.
    CREATE OBJECT ref.
  ENDIF.

  r_ref = ref.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_USW_UTILS" CMPNAME="GET_VENDOR" VERSION="1" LANGU="E" DESCRIPT="Get vendor data" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USW_UTILS" CMPNAME="GET_VENDOR" SCONAME="I_STCD1" VERSION="1" LANGU="E" DESCRIPT="C.N.P.J / CPF" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STCD1"/>
   <parameter CLSNAME="ZCL_USW_UTILS" CMPNAME="GET_VENDOR" SCONAME="E_LIFNR" VERSION="1" LANGU="E" DESCRIPT="Nº conta do fornecedor" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="LIFNR"/>
   <parameter CLSNAME="ZCL_USW_UTILS" CMPNAME="GET_VENDOR" SCONAME="E_NAME1" VERSION="1" LANGU="E" DESCRIPT="Nome 1" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="LFA1-NAME1"/>
   <parameter CLSNAME="ZCL_USW_UTILS" CMPNAME="GET_VENDOR" SCONAME="E_NAME2" VERSION="1" LANGU="E" DESCRIPT="Nome 2" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="LFA1-NAME2"/>
   <source>METHOD GET_VENDOR.

  DATA: BEGIN OF ls_lfa1,
        lifnr TYPE lfa1-lifnr,
        name1 TYPE lfa1-name1,
        name2 TYPE lfa1-name2,
      END OF ls_lfa1.

  DATA: lt_lifnr LIKE STANDARD TABLE OF ls_lfa1.

  DATA: l_stcd2 TYPE lfa1-stcd2.

  IF strlen( i_stcd1 ) = 14. &quot; CNPJ

    SELECT lifnr name1 name2 FROM lfa1
      INTO TABLE lt_lifnr UP TO 1 ROWS
      WHERE stcd1 = i_stcd1.
  ENDIF.

  IF strlen( i_stcd1 ) = 11. &quot; CPF

    SELECT lifnr name1 name2 FROM lfa1
      INTO TABLE lt_lifnr UP TO 1 ROWS
      WHERE stcd2 = l_stcd2.

  ENDIF.

  IF sy-subrc = 0.

    READ TABLE lt_lifnr INTO ls_lfa1 INDEX 1.

    e_lifnr = ls_lfa1-lifnr.
    e_name1 = ls_lfa1-name1.
    e_name2 = ls_lfa1-name2.

  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_USW_UTILS" CMPNAME="LOG_CREATE" VERSION="1" LANGU="E" DESCRIPT="Create Log (SLG1)" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USW_UTILS" CMPNAME="LOG_CREATE" SCONAME="I_EXTERNAL_ID" VERSION="1" LANGU="E" DESCRIPT="Log de aplicação: identificação externa" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BALNREXT"/>
   <parameter CLSNAME="ZCL_USW_UTILS" CMPNAME="LOG_CREATE" SCONAME="I_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Log de aplicação: nome do objeto (sigla de aplicação)" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BALOBJ_D"/>
   <parameter CLSNAME="ZCL_USW_UTILS" CMPNAME="LOG_CREATE" SCONAME="I_SUBOBJECT" VERSION="1" LANGU="E" DESCRIPT="Log de aplicação: subobjeto" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BALSUBOBJ"/>
   <parameter CLSNAME="ZCL_USW_UTILS" CMPNAME="LOG_CREATE" SCONAME="I_REPID" VERSION="1" LANGU="E" DESCRIPT="Nome do programa ABAP" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="REPID"/>
   <parameter CLSNAME="ZCL_USW_UTILS" CMPNAME="LOG_CREATE" SCONAME="R_BALLOGHNDL" VERSION="1" LANGU="E" DESCRIPT="GUID em formato &apos;CHAR&apos; com maiúsculas/minúsculas (!)" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="BALLOGHNDL"/>
   <source>method LOG_CREATE.

  DATA: ls_log TYPE bal_s_log.

  DATA: l_jobname TYPE tbtcm-jobname.


  ls_log-extnumber = i_external_id.
  ls_log-object    = i_object.
  ls_log-subobject = i_subobject.
  ls_log-aluser    = sy-uname.
  ls_log-alprog    = i_repid.
  ls_log-altcode   = sy-tcode.
  ls_log-aldate    = sy-datum.
  ls_log-altime    = sy-uzeit.

  IF NOT sy-batch IS INITIAL.

    CALL FUNCTION &apos;GET_JOB_RUNTIME_INFO&apos;
      IMPORTING
        jobname         = l_jobname
      EXCEPTIONS
        no_runtime_info = 1
        OTHERS          = 2.

    ls_log-alprog    = l_jobname.

*    B  Batch processing
*    D  DIALOG processing
*    I  Batch INPUT processing
    ls_log-almode    = &apos;B&apos;.

  ELSE.
    ls_log-almode  = &apos;D&apos;.     &quot; Dialog
  ENDIF.

  CALL FUNCTION &apos;BAL_LOG_CREATE&apos;
    EXPORTING
      i_s_log                 = ls_log
    IMPORTING
      e_log_handle            = r_balloghndl
    EXCEPTIONS
      log_header_inconsistent = 1
      OTHERS                  = 2.

  IF sy-subrc &lt;&gt; 0.
    &quot; Ok...
  ENDIF.

endmethod.</source>
  </method>
  <method CLSNAME="ZCL_USW_UTILS" CMPNAME="LOG_MSG_ADD" VERSION="1" LANGU="E" DESCRIPT="Add log message" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USW_UTILS" CMPNAME="LOG_MSG_ADD" SCONAME="I_LOG_HANDLE" VERSION="1" LANGU="E" DESCRIPT="Log de aplicação: handle de um log" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BALLOGHNDL"/>
   <parameter CLSNAME="ZCL_USW_UTILS" CMPNAME="LOG_MSG_ADD" SCONAME="IS_MSG" VERSION="1" LANGU="E" DESCRIPT="Log de aplicação: dados de uma mensagem" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BAL_S_MSG"/>
   <source>method LOG_MSG_ADD.

  CALL FUNCTION &apos;BAL_LOG_MSG_ADD&apos;
    EXPORTING
     i_log_handle              = i_log_handle
      i_s_msg                   = is_msg
*   IMPORTING
*     E_S_MSG_HANDLE            =
*     E_MSG_WAS_LOGGED          =
*     E_MSG_WAS_DISPLAYED       =
   EXCEPTIONS
     log_not_found             = 1
     msg_inconsistent          = 2
     log_is_full               = 3
     OTHERS                    = 4.

  IF sy-subrc &lt;&gt; 0.
*   Ok
  ENDIF.

endmethod.</source>
  </method>
  <method CLSNAME="ZCL_USW_UTILS" CMPNAME="LOG_SAVE" VERSION="1" LANGU="E" DESCRIPT="Save Log" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USW_UTILS" CMPNAME="LOG_SAVE" SCONAME="I_LOG_HANDLE" VERSION="1" LANGU="E" DESCRIPT="Log de aplicação: handle de um log" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BALLOGHNDL"/>
   <source>method LOG_SAVE.

  DATA: t_logh  TYPE bal_t_logh.

  APPEND i_log_handle TO t_logh.

  CALL FUNCTION &apos;BAL_DB_SAVE&apos;
    EXPORTING
      i_t_log_handle   = t_logh
    EXCEPTIONS
      log_not_found    = 1
      save_not_allowed = 2
      numbering_error  = 3
      OTHERS           = 4.

  IF sy-subrc &lt;&gt; 0.
*   Ok
  ENDIF.

endmethod.</source>
  </method>
  <method CLSNAME="ZCL_USW_UTILS" CMPNAME="UNZIP" VERSION="1" LANGU="E" DESCRIPT="Unzip" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USW_UTILS" CMPNAME="UNZIP" SCONAME="I_ZIP" VERSION="1" LANGU="E" DESCRIPT="Arquivo ZIP" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="XSTRING"/>
   <parameter CLSNAME="ZCL_USW_UTILS" CMPNAME="UNZIP" SCONAME="I_FILENAME" VERSION="1" LANGU="E" DESCRIPT="Nome do arquivo" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_USW_UTILS" CMPNAME="UNZIP" SCONAME="R_STRING" VERSION="1" LANGU="E" DESCRIPT="String com conteúdo do arquivo" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>method UNZIP.

  DATA: lo_zip    TYPE REF TO cl_abap_zip,
        lo_conv   TYPE REF TO cl_abap_conv_in_ce.

  DATA: l_xstring TYPE xstring.

  CREATE OBJECT lo_zip.

  CALL METHOD lo_zip-&gt;load
    EXPORTING
      zip = i_zip.

  CALL METHOD lo_zip-&gt;get
    EXPORTING
      name    = i_filename
    IMPORTING
      content = l_xstring.

  CALL METHOD cl_abap_conv_in_ce=&gt;create
    EXPORTING
      input = l_xstring
    RECEIVING
      conv  = lo_conv.

  CALL METHOD lo_conv-&gt;read
    IMPORTING
      data = r_string.

endmethod.</source>
  </method>
  <method CLSNAME="ZCL_USW_UTILS" CMPNAME="ZIP" VERSION="1" LANGU="E" DESCRIPT="Zip" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USW_UTILS" CMPNAME="ZIP" SCONAME="I_STRING" VERSION="1" LANGU="E" DESCRIPT="String com conteúdo do arquivo a ser compactado" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_USW_UTILS" CMPNAME="ZIP" SCONAME="I_FILENAME" VERSION="1" LANGU="E" DESCRIPT="Nome do arquivo" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_USW_UTILS" CMPNAME="ZIP" SCONAME="R_ZIP" VERSION="1" LANGU="E" DESCRIPT="Arquivo zipado" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="XSTRING"/>
   <source>METHOD ZIP.

  DATA: lo_zip    TYPE REF TO cl_abap_zip,
        l_xstring TYPE xstring.

*  CALL METHOD cl_bcs_convert=&gt;string_to_xstring(
*    EXPORTING
*      iv_string  = i_string   &quot; Input data
*    RECEIVING
*      ev_xstring = l_xstring   &quot; Output data
*                   ).

  CALL FUNCTION &apos;SCMS_STRING_TO_XSTRING&apos;
    EXPORTING
      text   = i_string
    IMPORTING
      buffer = l_xstring
    EXCEPTIONS
      failed = 1
      OTHERS = 2.

  IF sy-subrc = 0.

    CREATE OBJECT lo_zip.

    lo_zip-&gt;add(    &quot; Add file to ZIP
      name = i_filename
      content = l_xstring
    ).

    r_zip = lo_zip-&gt;save( ).    &quot; Returns ZIP

  ENDIF.

ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_REST_HANDLER" VERSION="1" LANGU="E" DESCRIPT="REST API Handler" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <implementing CLSNAME="ZCL_REST_HANDLER" REFCLSNAME="IF_HTTP_EXTENSION" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1"/>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool>
   <language SPRAS="E"/>
  </textPool>
  <attribute CLSNAME="ZCL_REST_HANDLER" CMPNAME="O_RESOURCE_CREATE" VERSION="1" LANGU="E" DESCRIPT="REST API - Resource Create Method" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZIF_REST_RESOURCE_CREATE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_REST_HANDLER" CMPNAME="O_RESOURCE_DELETE" VERSION="1" LANGU="E" DESCRIPT="REST API - Resource Create Method" EXPOSURE="2" STATE="1" EDITORDER="4 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZIF_REST_RESOURCE_DELETE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_REST_HANDLER" CMPNAME="O_RESOURCE_READ" VERSION="1" LANGU="E" DESCRIPT="REST API - Resource Create Method" EXPOSURE="2" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZIF_REST_RESOURCE_READ" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_REST_HANDLER" CMPNAME="O_RESOURCE_UPDATE" VERSION="1" LANGU="E" DESCRIPT="REST API - Resource Create Method" EXPOSURE="2" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZIF_REST_RESOURCE_UPDATE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <interfaceMethod CLSNAME="ZCL_REST_HANDLER" CPDNAME="IF_HTTP_EXTENSION~HANDLE_REQUEST">
   <source>METHOD if_http_extension~handle_request.

  FIELD-SYMBOLS: &lt;fs_request&gt;  TYPE ANY,
                 &lt;fs_response&gt; TYPE ANY.

* Anonymous data objects
  DATA: request       TYPE REF TO data,
        response      TYPE REF TO data.

* Objects
  DATA: lo_rest_auth  TYPE REF TO zcl_rest_auth,
        lo_ex         TYPE REF TO cx_root.

* Internal tables
  DATA: t_url_params  TYPE string_table,
        t_nvp         TYPE tihttpnvp.

* Elementary
  DATA: verb          TYPE string,
        path_info     TYPE string,
        app           TYPE string,
        resource      TYPE string,
        app_aux       TYPE string,
        resource_aux  TYPE string,
        request_type  TYPE string,
        response_type TYPE string,
        userid        TYPE string,
        password      TYPE string,
        token         TYPE string,
        token_co      TYPE string,
        auth_ok(1)    TYPE c.

* Retrieving the request method (POST, GET, PUT, DELETE)
  verb = server-&gt;request-&gt;get_header_field( name = &apos;~request_method&apos; ).

* Only methods GET, POST, PUT, DELETE are allowed
  IF ( verb NE &apos;GET&apos; ) AND ( verb NE &apos;POST&apos; ) AND
     ( verb NE &apos;PUT&apos; ) AND ( verb NE &apos;DELETE&apos; ).

    me-&gt;method_not_allowed( server ).

    EXIT.

  ENDIF.

* Get all header fields received
  server-&gt;request-&gt;get_form_fields_cs( CHANGING fields = t_nvp ).

* Retrieving the parameters passed in the URL
  path_info = server-&gt;request-&gt;get_header_field( name = &apos;~path_info&apos; ).

  SHIFT path_info LEFT BY 1 PLACES.

* Populate an internal table with all URL parameters received
  SPLIT path_info AT &apos;/&apos; INTO TABLE t_url_params.

* The FIRST URL parameter MUST BE the APPLICATION identifier
  READ TABLE t_url_params INTO app INDEX 1.

* The SECOND URL parameter MUST BE the RESOURCE identifier
  READ TABLE t_url_params INTO resource INDEX 2.

  IF app IS INITIAL.

    app_aux = server-&gt;request-&gt;get_form_field(&apos;app&apos;).

    IF NOT app_aux IS INITIAL.
      app = app_aux.
    ELSE.
      me-&gt;application_not_found( server ).
      EXIT.
    ENDIF.

  ENDIF.

  IF resource IS INITIAL.

    resource_aux = server-&gt;request-&gt;get_form_field(&apos;resource&apos;).

    IF NOT resource_aux IS INITIAL.
      resource = resource_aux.
    ELSE.
      me-&gt;resource_not_found( server ).
      EXIT.
    ENDIF.

  ENDIF.

  TRANSLATE app TO UPPER CASE.
  TRANSLATE resource TO UPPER CASE.

***** Just uncomment this block code if you want to use the user switch authentication mechanism
*****  lo_rest_auth = zcl_rest_auth=&gt;get_instance( ).
*****
*****  userid   = server-&gt;request-&gt;get_form_field(&apos;uid&apos;).
*****  password = server-&gt;request-&gt;get_form_field(&apos;pwd&apos;).
*****  token    = server-&gt;request-&gt;get_form_field(&apos;tkn&apos;).
*****  token_co = server-&gt;request-&gt;get_form_field(&apos;tknco&apos;).
*****
*****  lo_rest_auth-&gt;authenticate(
*****    EXPORTING
*****      i_id       = userid
*****      i_objtype  = &apos;ZUSWIU&apos;
*****      i_password = password
*****      i_token    = token
*****      i_token_co = token_co
*****      i_app      = app
*****      i_t_nvp    = t_nvp
*****    RECEIVING
*****      r_auth_ok  = auth_ok
*****  ).
*****
*****  IF auth_ok IS INITIAL.
*****
*****    me-&gt;unauthorized( server ).
*****
*****    EXIT.
*****
*****  ENDIF.

  &quot; Try to find the resource. If found, then an instance of it is created)
  me-&gt;get_rest_resource(
    EXPORTING i_resource = resource
              i_verb = verb
  ).

  CASE verb.

    WHEN &apos;POST&apos;.

      IF NOT me-&gt;o_resource_create IS BOUND.
        me-&gt;resource_not_found( server ).
        EXIT.
      ENDIF.

      TRY.

          request_type  = me-&gt;o_resource_create-&gt;get_request_type( i_app = app ).

          response_type = me-&gt;o_resource_create-&gt;get_response_type( i_app = app ).

        CATCH cx_root INTO lo_ex.

          &quot; Do nothing ...

      ENDTRY.

      IF NOT request_type IS INITIAL.

        CREATE DATA request TYPE (request_type).

        ASSIGN request-&gt;*  TO &lt;fs_request&gt;.

        me-&gt;transfer_request_data(
          EXPORTING
            i_t_nvp    = t_nvp
          CHANGING
            ch_request = &lt;fs_request&gt;
        ).

      ENDIF.

      IF response_type IS INITIAL.
        &quot; Falls back to the basic response type
        response_type = &apos;ZST_REST_RESPONSE_BASIC&apos;.
      ENDIF.

      CREATE DATA response TYPE (response_type).
      ASSIGN response-&gt;* TO &lt;fs_response&gt;.

      IF &lt;fs_request&gt; IS ASSIGNED.

        me-&gt;o_resource_create-&gt;create(
          EXPORTING
            i_t_nvp    = t_nvp
            i_app      = app
            i_request  = &lt;fs_request&gt;
          IMPORTING
            e_response = &lt;fs_response&gt;
        ).

      ELSE.

        me-&gt;o_resource_create-&gt;create(
          EXPORTING
            i_t_nvp    = t_nvp
            i_app      = app
          IMPORTING
            e_response = &lt;fs_response&gt;
        ).

      ENDIF.

    WHEN &apos;GET&apos;.

      IF NOT me-&gt;o_resource_read IS BOUND.
        me-&gt;resource_not_found( server ).
        EXIT.
      ENDIF.

      TRY.

          request_type  = me-&gt;o_resource_read-&gt;get_request_type( i_app = app ).

          response_type = me-&gt;o_resource_read-&gt;get_response_type( i_app = app ).

        CATCH cx_root INTO lo_ex.

          &quot; Do nothing ...

      ENDTRY.

      IF NOT request_type IS INITIAL.

        CREATE DATA request TYPE (request_type).

        ASSIGN request-&gt;*  TO &lt;fs_request&gt;.

        me-&gt;transfer_request_data(
          EXPORTING
            i_t_nvp    = t_nvp
          CHANGING
            ch_request = &lt;fs_request&gt;
        ).

      ENDIF.

      IF response_type IS INITIAL.
        &quot; Falls back to the basic response type
        response_type = &apos;ZST_REST_RESPONSE_BASIC&apos;.
      ENDIF.

      CREATE DATA response TYPE (response_type).
      ASSIGN response-&gt;* TO &lt;fs_response&gt;.

      IF &lt;fs_request&gt; IS ASSIGNED.

        me-&gt;o_resource_read-&gt;read(
          EXPORTING
            i_t_nvp    = t_nvp
            i_app      = app
            i_request  = &lt;fs_request&gt;
          IMPORTING
            e_response = &lt;fs_response&gt;
        ).

      ELSE.

        me-&gt;o_resource_read-&gt;read(
          EXPORTING
            i_t_nvp    = t_nvp
            i_app      = app
          IMPORTING
            e_response = &lt;fs_response&gt;
        ).

      ENDIF.

    WHEN &apos;PUT&apos;.

      IF NOT me-&gt;o_resource_update IS BOUND.
        me-&gt;resource_not_found( server ).
        EXIT.
      ENDIF.

      TRY.

          request_type  = me-&gt;o_resource_update-&gt;get_request_type( ).

          response_type = me-&gt;o_resource_update-&gt;get_response_type( ).

        CATCH cx_root INTO lo_ex.

          &quot; Do nothing ...

      ENDTRY.

      IF NOT request_type IS INITIAL.

        CREATE DATA request TYPE (request_type).

        ASSIGN request-&gt;*  TO &lt;fs_request&gt;.

        me-&gt;transfer_request_data(
          EXPORTING
            i_t_nvp    = t_nvp
          CHANGING
            ch_request = &lt;fs_request&gt;
        ).

      ENDIF.

      IF response_type IS INITIAL.
        &quot; Falls back to the basic response type
        response_type = &apos;ZST_REST_RESPONSE_BASIC&apos;.
      ENDIF.

      CREATE DATA response TYPE (response_type).
      ASSIGN response-&gt;* TO &lt;fs_response&gt;.

      IF &lt;fs_request&gt; IS ASSIGNED.

        me-&gt;o_resource_update-&gt;update(
          EXPORTING
            i_t_nvp    = t_nvp
            i_app      = app
            i_request  = &lt;fs_request&gt;
          IMPORTING
            e_response = &lt;fs_response&gt;
        ).

      ELSE.

        me-&gt;o_resource_update-&gt;update(
          EXPORTING
            i_t_nvp    = t_nvp
            i_app      = app
          IMPORTING
            e_response = &lt;fs_response&gt;
        ).

      ENDIF.

    WHEN &apos;DELETE&apos;.

      IF NOT me-&gt;o_resource_delete IS BOUND.
        me-&gt;resource_not_found( server ).
        EXIT.
      ENDIF.

      TRY.

          request_type  = me-&gt;o_resource_delete-&gt;get_request_type( ).
          response_type = me-&gt;o_resource_delete-&gt;get_response_type( ).

        CATCH cx_root INTO lo_ex.

          &quot; Do nothing ...

      ENDTRY.

      IF NOT request_type IS INITIAL.

        CREATE DATA request TYPE (request_type).

        ASSIGN request-&gt;*  TO &lt;fs_request&gt;.

        me-&gt;transfer_request_data(
          EXPORTING
            i_t_nvp    = t_nvp
          CHANGING
            ch_request = &lt;fs_request&gt;
        ).

      ENDIF.

      IF response_type IS INITIAL.
        &quot; Falls back to the basic response type
        response_type = &apos;ZST_REST_RESPONSE_BASIC&apos;.
      ENDIF.

      CREATE DATA response TYPE (response_type).
      ASSIGN response-&gt;* TO &lt;fs_response&gt;.

      IF &lt;fs_request&gt; IS ASSIGNED.

        me-&gt;o_resource_delete-&gt;delete(
          EXPORTING
            i_t_nvp    = t_nvp
            i_app      = app
            i_request  = &lt;fs_request&gt;
          IMPORTING
            e_response = &lt;fs_response&gt;
        ).

      ELSE.

        me-&gt;o_resource_delete-&gt;delete(
          EXPORTING
            i_t_nvp    = t_nvp
            i_app      = app
          IMPORTING
            e_response = &lt;fs_response&gt;
        ).

      ENDIF.

  ENDCASE.

  IF &lt;fs_response&gt; IS ASSIGNED.

    me-&gt;set_response(
      EXPORTING
        i_server   = server
        i_response = &lt;fs_response&gt;
*       I_TYPE     = &apos;JSON&apos; &quot; Default = JSON
    ).

  ENDIF.

ENDMETHOD.</source>
  </interfaceMethod>
  <method CLSNAME="ZCL_REST_HANDLER" CMPNAME="APPLICATION_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Application resource not found" EXPOSURE="0" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_REST_HANDLER" CMPNAME="APPLICATION_NOT_FOUND" SCONAME="I_SERVER" VERSION="1" LANGU="E" DESCRIPT="HTTP Framework (iHTTP) HTTP Server" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_HTTP_SERVER"/>
   <source>METHOD APPLICATION_NOT_FOUND.

  i_server-&gt;response-&gt;set_status(
    code = 404
    reason = &apos;Application not found&apos;
  ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_REST_HANDLER" CMPNAME="GET_REST_RESOURCE" VERSION="1" LANGU="E" DESCRIPT="Get the REST resource" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_REST_HANDLER" CMPNAME="GET_REST_RESOURCE" SCONAME="I_RESOURCE" VERSION="1" LANGU="E" DESCRIPT="REST Resource" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_REST_HANDLER" CMPNAME="GET_REST_RESOURCE" SCONAME="I_VERB" VERSION="1" LANGU="E" DESCRIPT="POST, GET, PUT, DELETE" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <source>METHOD get_rest_resource.

  DATA: t_vseoifimpl TYPE STANDARD TABLE OF vseoifimpl.

  DATA: s_vseoifimpl TYPE vseoifimpl.

  DATA: class_name TYPE vseoifimpl-clsname,
        refclsname TYPE vseoifimpl-refclsname.

  CONCATENATE &apos;%&apos; i_resource INTO class_name.

  CHECK NOT i_resource IS INITIAL.

  CASE i_verb.
    WHEN &apos;POST&apos;.
      refclsname = &apos;ZIF_REST_RESOURCE_CREATE&apos;.
    WHEN &apos;GET&apos;.
      refclsname = &apos;ZIF_REST_RESOURCE_READ&apos;.
    WHEN &apos;PUT&apos;.
      refclsname = &apos;ZIF_REST_RESOURCE_UPDATE&apos;.
    WHEN &apos;DELETE&apos;.
      refclsname = &apos;ZIF_REST_RESOURCE_DELETE&apos;.
  ENDCASE.

  SELECT clsname refclsname version state FROM vseoifimpl
    INTO TABLE t_vseoifimpl
    WHERE clsname LIKE class_name AND
          refclsname = refclsname AND
          version    = &apos;1&apos; AND
          state      = &apos;1&apos;.

  IF NOT t_vseoifimpl[] IS INITIAL.

    READ TABLE t_vseoifimpl INTO s_vseoifimpl INDEX 1.

    CASE i_verb.
      WHEN &apos;POST&apos;.
        CREATE OBJECT me-&gt;o_resource_create
          TYPE (s_vseoifimpl-clsname).
      WHEN &apos;GET&apos;.
        CREATE OBJECT me-&gt;o_resource_read
          TYPE (s_vseoifimpl-clsname).
      WHEN &apos;PUT&apos;.
        CREATE OBJECT me-&gt;o_resource_update
          TYPE (s_vseoifimpl-clsname).
      WHEN &apos;DELETE&apos;.
        CREATE OBJECT me-&gt;o_resource_delete
          TYPE (s_vseoifimpl-clsname).
    ENDCASE.

  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_REST_HANDLER" CMPNAME="METHOD_NOT_ALLOWED" VERSION="1" LANGU="E" DESCRIPT="Method (HTTP Verb) not allowed" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_REST_HANDLER" CMPNAME="METHOD_NOT_ALLOWED" SCONAME="I_SERVER" VERSION="1" LANGU="E" DESCRIPT="HTTP Framework (iHTTP) HTTP Server" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_HTTP_SERVER"/>
   <source>METHOD METHOD_NOT_ALLOWED.

  &quot; For any other method the service should return the error code 405
  i_server-&gt;response-&gt;set_status(
    code = &apos;405&apos;
    reason = &apos;Method not allowed&apos;
  ).

  i_server-&gt;response-&gt;set_header_field(
    name = &apos;Allow&apos;
    value = &apos;POST, GET, PUT, DELETE&apos;
  ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_REST_HANDLER" CMPNAME="RESOURCE_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="REST resource not found" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_REST_HANDLER" CMPNAME="RESOURCE_NOT_FOUND" SCONAME="I_SERVER" VERSION="1" LANGU="E" DESCRIPT="HTTP Framework (iHTTP) HTTP Server" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_HTTP_SERVER"/>
   <source>METHOD RESOURCE_NOT_FOUND.

  i_server-&gt;response-&gt;set_status(
    code = 404
    reason = &apos;Resource not found&apos;
  ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_REST_HANDLER" CMPNAME="SET_RESPONSE" VERSION="1" LANGU="E" DESCRIPT="Set response" EXPOSURE="0" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_REST_HANDLER" CMPNAME="SET_RESPONSE" SCONAME="I_SERVER" VERSION="1" LANGU="E" DESCRIPT="HTTP Framework (iHTTP) HTTP Server" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_HTTP_SERVER"/>
   <parameter CLSNAME="ZCL_REST_HANDLER" CMPNAME="SET_RESPONSE" SCONAME="I_RESPONSE" VERSION="1" LANGU="E" DESCRIPT="Response" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DATA"/>
   <parameter CLSNAME="ZCL_REST_HANDLER" CMPNAME="SET_RESPONSE" SCONAME="I_TYPE" VERSION="1" LANGU="E" DESCRIPT="Response type" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CHAR30" PARVALUE="&apos;JSON&apos;"/>
   <source>METHOD SET_RESPONSE.

  &quot; Objects
  DATA: json_doc TYPE REF TO zcl_json_document.

  &quot; Variables
  DATA: json_response TYPE string.

  IF i_type = &apos;JSON&apos;.

    json_doc = zcl_json_document=&gt;create_with_data( i_response ).

    json_response = json_doc-&gt;get_json( ).

*   Sets the content type of the response
    i_server-&gt;response-&gt;set_header_field(
      name = &apos;Content-Type&apos;
      value = &apos;application/json; charset=iso-8859-1&apos;
    ).

*   Returns the results in JSON format
    i_server-&gt;response-&gt;set_cdata( data = json_response ).

  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_REST_HANDLER" CMPNAME="TRANSFER_REQUEST_DATA" VERSION="1" LANGU="E" DESCRIPT="Transfer request data" EXPOSURE="0" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_REST_HANDLER" CMPNAME="TRANSFER_REQUEST_DATA" SCONAME="I_T_NVP" VERSION="1" LANGU="E" DESCRIPT="HTTP Framework (iHTTP) Table Name/Value Pairs" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TIHTTPNVP"/>
   <parameter CLSNAME="ZCL_REST_HANDLER" CMPNAME="TRANSFER_REQUEST_DATA" SCONAME="CH_REQUEST" VERSION="1" LANGU="E" DESCRIPT="Request data" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="DATA"/>
   <source>METHOD transfer_request_data.

  FIELD-SYMBOLS: &lt;fs&gt; TYPE ANY.

  &quot; Objects
  DATA: o_ex TYPE REF TO cx_root.

  &quot; Strcutures
  DATA: s_nvp LIKE LINE OF i_t_nvp.

  LOOP AT i_t_nvp INTO s_nvp.

    TRY.

        TRANSLATE s_nvp-name TO UPPER CASE.

        ASSIGN COMPONENT s_nvp-name OF STRUCTURE ch_request TO &lt;fs&gt;.

        IF &lt;fs&gt; IS ASSIGNED.
          &lt;fs&gt; = s_nvp-value.
          UNASSIGN &lt;fs&gt;.
        ENDIF.

      CATCH cx_root INTO o_ex.
        &quot; TODO: handle conversion errors
    ENDTRY.

  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_REST_HANDLER" CMPNAME="UNAUTHORIZED" VERSION="1" LANGU="E" DESCRIPT="User unauthorized" EXPOSURE="0" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_REST_HANDLER" CMPNAME="UNAUTHORIZED" SCONAME="I_SERVER" VERSION="1" LANGU="E" DESCRIPT="HTTP Framework (iHTTP) HTTP Server" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_HTTP_SERVER"/>
   <source>METHOD UNAUTHORIZED.

  i_server-&gt;response-&gt;set_status(
    code   = &apos;401&apos;
    reason = &apos;Unauthorized&apos;
  ).

  i_server-&gt;response-&gt;set_header_field(
    name  = &apos;Reason&apos;
    value = &apos;Unauthorized&apos;
  ).

ENDMETHOD.</source>
  </method>
 </CLAS>
 <DOMA DOMNAME="ZDO_RESTAPI_REFUSRONLY" DDLANGUAGE="E" DATATYPE="CHAR" LENG="000001" OUTPUTLEN="000001" DECIMALS="000000" VALEXI="X" MASKLEN="0000" DDTEXT="REST API - Ref. User only" AUTHCLASS="00">
  <dd07v DOMNAME="ZDO_RESTAPI_REFUSRONLY" VALPOS="0001" DDLANGUAGE="E" DDTEXT="No"/>
  <dd07v DOMNAME="ZDO_RESTAPI_REFUSRONLY" VALPOS="0002" DDLANGUAGE="E" DOMVALUE_L="X" DDTEXT="Yes"/>
 </DOMA>
 <DTEL ROLLNAME="ZPBR_CPFNR" DDLANGUAGE="E" ROUTPUTLEN="000000" HEADLEN="45" SCRLEN1="10" SCRLEN2="15" SCRLEN3="25" DDTEXT="Sole Proprietor&apos;s Registry number (CPF)" REPTEXT="Sole Proprietor&apos;s Registry number (CPF)" SCRTEXT_S="CPF number" SCRTEXT_M="CPF number" SCRTEXT_L="CPF number" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000015" DECIMALS="000000" OUTPUTLEN="000015">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZDE_RESTAPI_REFUSRONLY" DDLANGUAGE="E" DOMNAME="ZDO_RESTAPI_REFUSRONLY" ROUTPUTLEN="000000" HEADLEN="14" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DDTEXT="REST API  - Flag ref. user only" REPTEXT="Ref. User Only" SCRTEXT_S="Ref. User" SCRTEXT_M="Ref. User Only" SCRTEXT_L="Reference User Only" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000001" DECIMALS="000000" OUTPUTLEN="000001" VALEXI="X" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZDE_RESTAPI_PRIVATE_KEY" DDLANGUAGE="E" ROUTPUTLEN="000000" HEADLEN="32" SCRLEN1="10" SCRLEN2="15" SCRLEN3="25" DDTEXT="Internet User Private Key - Authentication by token" REPTEXT="Private Key" SCRTEXT_S="Priv.Key" SCRTEXT_M="Private Key" SCRTEXT_L="Internet User Private Key" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000032" DECIMALS="000000" OUTPUTLEN="000032">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZED_INTERNET_USER_STATUS" DDLANGUAGE="E" DOMNAME="ICON" ROUTPUTLEN="000000" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DDTEXT="Internet User Status" REPTEXT="Status" SCRTEXT_S="Status" SCRTEXT_M="Status" SCRTEXT_L="Status" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000004" DECIMALS="000000" OUTPUTLEN="000004" ENTITYTAB="ICON" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZDE_RESTAPI_RESOURCE_ID" DDLANGUAGE="E" ROUTPUTLEN="000000" HEADLEN="20" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DDTEXT="REST API Resource ID" REPTEXT="REST API Resource ID" SCRTEXT_S="ResourceID" SCRTEXT_M="Resource ID" SCRTEXT_L="REST API Resource ID" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" DECIMALS="000000" OUTPUTLEN="000030">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZDE_RESTAPI_APP_ID" DDLANGUAGE="E" ROUTPUTLEN="000000" HEADLEN="23" SCRLEN1="10" SCRLEN2="15" SCRLEN3="23" DDTEXT="REST API Application ID" REPTEXT="REST API Application ID" SCRTEXT_S="App ID" SCRTEXT_M="REST API App ID" SCRTEXT_L="REST API Application ID" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" DECIMALS="000000" OUTPUTLEN="000030">
  <tpara/>
 </DTEL>
 <INTF CLSNAME="ZIF_REST_RESOURCE_READ" VERSION="1" LANGU="E" DESCRIPT="REST API - Resource READ Method" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" UNICODE="X">
  <method CLSNAME="ZIF_REST_RESOURCE_READ" CMPNAME="GET_REQUEST_TYPE" VERSION="1" LANGU="E" DESCRIPT="Returns read method request type" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_REST_RESOURCE_READ" CMPNAME="GET_REQUEST_TYPE" SCONAME="I_APP" VERSION="1" LANGU="E" DESCRIPT="Application" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZIF_REST_RESOURCE_READ" CMPNAME="GET_REQUEST_TYPE" SCONAME="R_REQUEST_TYPE" VERSION="1" LANGU="E" DESCRIPT="Request type" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TYPENAME"/>
  </method>
  <method CLSNAME="ZIF_REST_RESOURCE_READ" CMPNAME="GET_RESPONSE_TYPE" VERSION="1" LANGU="E" DESCRIPT="Returns read method response type" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_REST_RESOURCE_READ" CMPNAME="GET_RESPONSE_TYPE" SCONAME="I_APP" VERSION="1" LANGU="E" DESCRIPT="Application" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZIF_REST_RESOURCE_READ" CMPNAME="GET_RESPONSE_TYPE" SCONAME="R_RESPONSE_TYPE" VERSION="1" LANGU="E" DESCRIPT="Response type" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TYPENAME"/>
  </method>
  <method CLSNAME="ZIF_REST_RESOURCE_READ" CMPNAME="READ" VERSION="1" LANGU="E" DESCRIPT="Read resource" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_REST_RESOURCE_READ" CMPNAME="READ" SCONAME="I_T_NVP" VERSION="1" LANGU="E" DESCRIPT="HTTP Framework (iHTTP) Table Name/Value Pairs" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TIHTTPNVP" PAROPTIONL="X"/>
   <parameter CLSNAME="ZIF_REST_RESOURCE_READ" CMPNAME="READ" SCONAME="I_APP" VERSION="1" LANGU="E" DESCRIPT="Application" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZIF_REST_RESOURCE_READ" CMPNAME="READ" SCONAME="I_REQUEST" VERSION="1" LANGU="E" DESCRIPT="Request data" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DATA" PAROPTIONL="X"/>
   <parameter CLSNAME="ZIF_REST_RESOURCE_READ" CMPNAME="READ" SCONAME="E_RESPONSE" VERSION="1" LANGU="E" DESCRIPT="Response data" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="DATA"/>
  </method>
 </INTF>
 <INTF CLSNAME="ZIF_REST_RESOURCE_UPDATE" VERSION="1" LANGU="E" DESCRIPT="REST API - Resource Create Method" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" UNICODE="X">
  <method CLSNAME="ZIF_REST_RESOURCE_UPDATE" CMPNAME="GET_REQUEST_TYPE" VERSION="1" LANGU="E" DESCRIPT="Returns update method request type" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_REST_RESOURCE_UPDATE" CMPNAME="GET_REQUEST_TYPE" SCONAME="I_APP" VERSION="1" LANGU="E" DESCRIPT="Application" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZIF_REST_RESOURCE_UPDATE" CMPNAME="GET_REQUEST_TYPE" SCONAME="R_REQUEST_TYPE" VERSION="1" LANGU="E" DESCRIPT="Request type" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TYPENAME"/>
  </method>
  <method CLSNAME="ZIF_REST_RESOURCE_UPDATE" CMPNAME="GET_RESPONSE_TYPE" VERSION="1" LANGU="E" DESCRIPT="Returns update method response type" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_REST_RESOURCE_UPDATE" CMPNAME="GET_RESPONSE_TYPE" SCONAME="I_APP" VERSION="1" LANGU="E" DESCRIPT="Application" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZIF_REST_RESOURCE_UPDATE" CMPNAME="GET_RESPONSE_TYPE" SCONAME="R_RESPONSE_TYPE" VERSION="1" LANGU="E" DESCRIPT="Response type" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TYPENAME"/>
  </method>
  <method CLSNAME="ZIF_REST_RESOURCE_UPDATE" CMPNAME="UPDATE" VERSION="1" LANGU="E" DESCRIPT="Update resource" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_REST_RESOURCE_UPDATE" CMPNAME="UPDATE" SCONAME="I_T_NVP" VERSION="1" LANGU="E" DESCRIPT="HTTP Framework (iHTTP) Table Name/Value Pairs" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TIHTTPNVP" PAROPTIONL="X"/>
   <parameter CLSNAME="ZIF_REST_RESOURCE_UPDATE" CMPNAME="UPDATE" SCONAME="I_APP" VERSION="1" LANGU="E" DESCRIPT="Application" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZIF_REST_RESOURCE_UPDATE" CMPNAME="UPDATE" SCONAME="I_REQUEST" VERSION="1" LANGU="E" DESCRIPT="Request" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DATA" PAROPTIONL="X"/>
   <parameter CLSNAME="ZIF_REST_RESOURCE_UPDATE" CMPNAME="UPDATE" SCONAME="E_RESPONSE" VERSION="1" LANGU="E" DESCRIPT="Response" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="DATA"/>
  </method>
 </INTF>
 <INTF CLSNAME="ZIF_REST_RESOURCE_DELETE" VERSION="1" LANGU="E" DESCRIPT="REST API - Resource Create Method" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" UNICODE="X">
  <method CLSNAME="ZIF_REST_RESOURCE_DELETE" CMPNAME="DELETE" VERSION="1" LANGU="E" DESCRIPT="Delete resource" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_REST_RESOURCE_DELETE" CMPNAME="DELETE" SCONAME="I_T_NVP" VERSION="1" LANGU="E" DESCRIPT="HTTP Framework (iHTTP) Table Name/Value Pairs" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TIHTTPNVP" PAROPTIONL="X"/>
   <parameter CLSNAME="ZIF_REST_RESOURCE_DELETE" CMPNAME="DELETE" SCONAME="I_APP" VERSION="1" LANGU="E" DESCRIPT="Application" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZIF_REST_RESOURCE_DELETE" CMPNAME="DELETE" SCONAME="I_REQUEST" VERSION="1" LANGU="E" DESCRIPT="Request" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DATA" PAROPTIONL="X"/>
   <parameter CLSNAME="ZIF_REST_RESOURCE_DELETE" CMPNAME="DELETE" SCONAME="E_RESPONSE" VERSION="1" LANGU="E" DESCRIPT="Response" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="DATA"/>
  </method>
  <method CLSNAME="ZIF_REST_RESOURCE_DELETE" CMPNAME="GET_REQUEST_TYPE" VERSION="1" LANGU="E" DESCRIPT="Returns delete method request type" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_REST_RESOURCE_DELETE" CMPNAME="GET_REQUEST_TYPE" SCONAME="I_APP" VERSION="1" LANGU="E" DESCRIPT="Application" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZIF_REST_RESOURCE_DELETE" CMPNAME="GET_REQUEST_TYPE" SCONAME="R_REQUEST_TYPE" VERSION="1" LANGU="E" DESCRIPT="Request type" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TYPENAME"/>
  </method>
  <method CLSNAME="ZIF_REST_RESOURCE_DELETE" CMPNAME="GET_RESPONSE_TYPE" VERSION="1" LANGU="E" DESCRIPT="Returns delete method response type" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_REST_RESOURCE_DELETE" CMPNAME="GET_RESPONSE_TYPE" SCONAME="I_APP" VERSION="1" LANGU="E" DESCRIPT="Application" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZIF_REST_RESOURCE_DELETE" CMPNAME="GET_RESPONSE_TYPE" SCONAME="R_RESPONSE_TYPE" VERSION="1" LANGU="E" DESCRIPT="Response type" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TYPENAME"/>
  </method>
 </INTF>
 <INTF CLSNAME="ZIF_REST_RESOURCE_CREATE" VERSION="1" LANGU="E" DESCRIPT="REST API - Resource Create Method" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" UNICODE="X">
  <method CLSNAME="ZIF_REST_RESOURCE_CREATE" CMPNAME="CREATE" VERSION="1" LANGU="E" DESCRIPT="Create resource" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_REST_RESOURCE_CREATE" CMPNAME="CREATE" SCONAME="I_T_NVP" VERSION="1" LANGU="E" DESCRIPT="HTTP Framework (iHTTP) Table Name/Value Pairs" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TIHTTPNVP" PAROPTIONL="X"/>
   <parameter CLSNAME="ZIF_REST_RESOURCE_CREATE" CMPNAME="CREATE" SCONAME="I_APP" VERSION="1" LANGU="E" DESCRIPT="Application" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZIF_REST_RESOURCE_CREATE" CMPNAME="CREATE" SCONAME="I_REQUEST" VERSION="1" LANGU="E" DESCRIPT="Request" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DATA" PAROPTIONL="X"/>
   <parameter CLSNAME="ZIF_REST_RESOURCE_CREATE" CMPNAME="CREATE" SCONAME="E_RESPONSE" VERSION="1" LANGU="E" DESCRIPT="Response" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="DATA"/>
  </method>
  <method CLSNAME="ZIF_REST_RESOURCE_CREATE" CMPNAME="GET_REQUEST_TYPE" VERSION="1" LANGU="E" DESCRIPT="Returns create method request type" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_REST_RESOURCE_CREATE" CMPNAME="GET_REQUEST_TYPE" SCONAME="I_APP" VERSION="1" LANGU="E" DESCRIPT="Application" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZIF_REST_RESOURCE_CREATE" CMPNAME="GET_REQUEST_TYPE" SCONAME="R_REQUEST_TYPE" VERSION="1" LANGU="E" DESCRIPT="Request type" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TYPENAME"/>
  </method>
  <method CLSNAME="ZIF_REST_RESOURCE_CREATE" CMPNAME="GET_RESPONSE_TYPE" VERSION="1" LANGU="E" DESCRIPT="Returns create method response type" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_REST_RESOURCE_CREATE" CMPNAME="GET_RESPONSE_TYPE" SCONAME="I_APP" VERSION="1" LANGU="E" DESCRIPT="Application" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZIF_REST_RESOURCE_CREATE" CMPNAME="GET_RESPONSE_TYPE" SCONAME="R_RESPONSE_TYPE" VERSION="1" LANGU="E" DESCRIPT="Response type" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TYPENAME"/>
  </method>
 </INTF>
 <MSAG ARBGB="ZREST" MASTERLANG="E" RESPUSER="SAPUSER" STEXT="REST API">
  <t100 SPRSL="P" ARBGB="ZREST" MSGNR="000" TEXT="&amp; &amp; &amp; &amp;"/>
  <t100 SPRSL="E" ARBGB="ZREST" MSGNR="000" TEXT="&amp; &amp; &amp; &amp;"/>
  <t100 SPRSL="P" ARBGB="ZREST" MSGNR="001" TEXT="&amp;"/>
  <t100 SPRSL="E" ARBGB="ZREST" MSGNR="001" TEXT="&amp;"/>
  <t100 SPRSL="P" ARBGB="ZREST" MSGNR="002" TEXT="Address can be maintained only for already saved entries"/>
  <t100 SPRSL="E" ARBGB="ZREST" MSGNR="002" TEXT="Address can be maintained only for already saved entries"/>
  <t100 SPRSL="P" ARBGB="ZREST" MSGNR="003" TEXT="Please select one entry to maintain"/>
  <t100 SPRSL="E" ARBGB="ZREST" MSGNR="003" TEXT="Please select one entry to maintain"/>
  <t100 SPRSL="P" ARBGB="ZREST" MSGNR="004" TEXT="Please select only one entry to maintain"/>
  <t100 SPRSL="E" ARBGB="ZREST" MSGNR="004" TEXT="Please select only one entry to maintain"/>
  <t100 SPRSL="P" ARBGB="ZREST" MSGNR="005" TEXT="Duplicated entry &amp; &amp;"/>
  <t100 SPRSL="E" ARBGB="ZREST" MSGNR="005" TEXT="Duplicated entry &amp; &amp;"/>
  <t100 SPRSL="P" ARBGB="ZREST" MSGNR="006" TEXT="Duplicated entry &amp;"/>
  <t100 SPRSL="E" ARBGB="ZREST" MSGNR="006" TEXT="Duplicated entry &amp; &amp; &amp;"/>
  <t100 SPRSL="E" ARBGB="ZREST" MSGNR="007" TEXT="Data saved"/>
  <t100t SPRSL="E" ARBGB="ZREST" STEXT="REST API"/>
  <t100t SPRSL="P" ARBGB="ZREST" STEXT="REST API"/>
 </MSAG>
 <PROG NAME="ZRUSW01_PAI" VARCL="X" SUBC="I" LEVL="700" RMAND="100" RLOAD="P" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="PAI Modules" LENGTH="11 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  Include           ZRUSW01_PAI
*&amp;---------------------------------------------------------------------*

*&amp;---------------------------------------------------------------------*
*&amp;      Module  USER_COMMAND_9000  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_9000 INPUT.

  o_app-&gt;handle_user_command( ).

ENDMODULE.                 &quot; USER_COMMAND_9000  INPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Module  EXIT  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE exit INPUT.

  CASE okcode.
    WHEN &apos;BACK&apos;.
      LEAVE TO SCREEN 0.
    WHEN &apos;EXIT&apos; OR &apos;CANCEL&apos;.
      LEAVE PROGRAM.
    WHEN OTHERS.
  ENDCASE.

ENDMODULE.                 &quot; EXIT  INPUT</source>
 </PROG>
 <PROG NAME="ZRUSW01_PBO" VARCL="X" SUBC="I" LEVL="700" RMAND="100" RLOAD="P" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="PBO Modules" LENGTH="11 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  Include           ZRUSW01_PBO
*&amp;---------------------------------------------------------------------*

*&amp;---------------------------------------------------------------------*
*&amp;      Module  STATUS_9000  OUTPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_9000 OUTPUT.

  SET PF-STATUS &apos;PF9000&apos;.
  SET TITLEBAR &apos;TB9000&apos;.

ENDMODULE.                 &quot; STATUS_9000  OUTPUT

*&amp;---------------------------------------------------------------------*
*&amp;      Module  INI_COMP  OUTPUT
*&amp;---------------------------------------------------------------------*
*       Inicializa componentes de tela (ALV e Container)
*----------------------------------------------------------------------*
MODULE ini_comp OUTPUT.

  o_app-&gt;init_gui_objects( ).

ENDMODULE.                 &quot; INI_COMP  OUTPUT</source>
 </PROG>
 <PROG NAME="ZRUSW01_IMP" VARCL="X" SUBC="I" LEVL="700" RMAND="100" RLOAD="P" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Local class implementation" LENGTH="28 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  Include           ZRUSW01_IMP
*&amp;---------------------------------------------------------------------*

*---------------------------------------------------------------------*
*       CLASS lcl_application IMPLEMENTATION
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
CLASS lcl_application IMPLEMENTATION.

  METHOD handle_user_command.

    FIELD-SYMBOLS: &lt;lfs_outtab&gt; LIKE LINE OF me-&gt;t_outtab.

    DATA: lt_index_rows TYPE lvc_t_row,
          lt_row_no     TYPE lvc_t_roid.

    DATA: ls_row TYPE lvc_s_row.

    DATA: l_answer     TYPE char1,
          l_answer2    TYPE char1,
          l_value      TYPE spop-varvalue1,
          l_password   TYPE bapipwd,
          l_msg        TYPE string,
          l_rc         TYPE sysubrc,
          l_pwd_aux    TYPE string.

    CALL METHOD o_alv-&gt;get_selected_rows
      IMPORTING
        et_index_rows = lt_index_rows
        et_row_no     = lt_row_no.

    IF lt_index_rows[] IS INITIAL.
      MESSAGE i001(zrest) WITH text-002 DISPLAY LIKE &apos;E&apos;.
      EXIT.
    ENDIF.

    CASE okcode.

      WHEN &apos;LOCK&apos;.

        LOOP AT lt_index_rows INTO ls_row.

          READ TABLE me-&gt;t_outtab ASSIGNING &lt;lfs_outtab&gt;
            INDEX ls_row-index.

          me-&gt;lock( CHANGING ch_s_outtab = &lt;lfs_outtab&gt; ).

        ENDLOOP.

      WHEN &apos;UNLOCK&apos;.

        LOOP AT lt_index_rows INTO ls_row.

          READ TABLE me-&gt;t_outtab ASSIGNING &lt;lfs_outtab&gt;
            INDEX ls_row-index.

          me-&gt;unlock( CHANGING ch_s_outtab = &lt;lfs_outtab&gt; ).

        ENDLOOP.

      WHEN &apos;NEW_PWD&apos;.

        CALL FUNCTION &apos;POPUP_TO_CONFIRM&apos;
          EXPORTING
            text_question  = text-005
          IMPORTING
            answer         = l_answer
          EXCEPTIONS
            text_not_found = 0
            OTHERS         = 0.

        IF l_answer = &apos;A&apos;. &quot; Cancel
          MESSAGE s000(zrest) WITH text-004.
          EXIT.
        ENDIF.

        IF l_answer = &apos;2&apos;.

          CALL FUNCTION &apos;POPUP_TO_GET_ONE_VALUE&apos;
            EXPORTING
              textline1      = text-006
              titel          = text-007
              valuelength    = 8
            IMPORTING
              answer         = l_answer2
              value1         = l_value
            EXCEPTIONS
              titel_too_long = 0
              OTHERS         = 0.

          IF ( l_value IS INITIAL ) OR ( l_answer2 &lt;&gt; &apos;J&apos; ).

            MESSAGE s000(zrest) WITH text-004.
            EXIT.

          ELSE.

            l_pwd_aux = l_value.

            CONDENSE l_pwd_aux NO-GAPS.

            FIND FIRST OCCURRENCE OF REGEX &apos;((?=.*\d)(?=.*[A-Z])(?=.*[0-9]).{8,10})&apos;
            IN l_pwd_aux
            IGNORING CASE.

            IF sy-subrc &lt;&gt; 0.
              MESSAGE i000(zrest) WITH text-008 DISPLAY LIKE &apos;E&apos;.
              EXIT.
            ENDIF.

            l_password = l_value.

            CALL FUNCTION &apos;PASSWORD_FORMAL_CHECK&apos;
              EXPORTING
                password             = l_password
                downwards_compatible = &apos;X&apos;
              IMPORTING
                rc                   = l_rc
                msgtext              = l_msg
              EXCEPTIONS
                internal_error       = 1
                OTHERS               = 2.

            IF sy-subrc &lt;&gt; 0 OR l_rc &lt;&gt; 0.
              IF l_rc &lt;&gt; 41. &quot;disable case sensitive check
                MESSAGE i000(zrest) WITH l_msg DISPLAY LIKE &apos;E&apos;.
                MESSAGE s000(zrest) WITH text-004.
                EXIT.
              ENDIF.
            ENDIF.

          ENDIF.

          me-&gt;new_internet_user_pwd = l_value.

        ENDIF.

        me-&gt;show_password( ).

        LOOP AT lt_index_rows INTO ls_row.

          READ TABLE me-&gt;t_outtab ASSIGNING &lt;lfs_outtab&gt;
            INDEX ls_row-index.

          IF l_answer = &apos;1&apos;. &quot; Sim
            me-&gt;new_password( CHANGING ch_s_outtab = &lt;lfs_outtab&gt; ).
          ELSEIF l_answer = &apos;2&apos;. &quot; Não
            me-&gt;new_password( EXPORTING i_auto = &apos; &apos;
                              CHANGING ch_s_outtab = &lt;lfs_outtab&gt; ).
          ENDIF.

        ENDLOOP.

      WHEN OTHERS.

        &quot; Ação não suportada pela aplicação
        MESSAGE i000(zrest) WITH text-003 DISPLAY LIKE &apos;E&apos;.

    ENDCASE.

    CALL METHOD o_alv-&gt;set_selected_rows
      EXPORTING
        it_index_rows            = lt_index_rows
        it_row_no                = lt_row_no
        is_keep_other_selections = &apos;X&apos;.

  ENDMETHOD.                    &quot;handle_user_command

  METHOD lock.

    DATA: lo_usw TYPE REF TO zcl_usw.

    DATA: l_rc TYPE sysubrc.

    lo_usw = zcl_usw=&gt;get_instance( ).

    CALL METHOD lo_usw-&gt;lock_internet_user
      EXPORTING
        i_objtype = ch_s_outtab-objtype
        i_id      = ch_s_outtab-objid
      RECEIVING
        r_rc      = l_rc.

    IF l_rc IS INITIAL.

      ch_s_outtab-status = &apos;@06@&apos;. &quot; ICON_LOCKED

    ELSE.

      &quot; TODO: tratar erro

    ENDIF.

    CALL METHOD o_alv-&gt;refresh_table_display
      EXPORTING
        i_soft_refresh = &apos;X&apos;
      EXCEPTIONS
        finished       = 1
        OTHERS         = 2.

    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

  ENDMETHOD.                    &quot;lock

  METHOD unlock.

    DATA: lo_usw TYPE REF TO zcl_usw.

    DATA: l_rc TYPE sysubrc.

    lo_usw = zcl_usw=&gt;get_instance( ).

    CALL METHOD lo_usw-&gt;unlock_internet_user
      EXPORTING
        i_objtype = ch_s_outtab-objtype
        i_id      = ch_s_outtab-objid
      RECEIVING
        r_rc      = l_rc.

    IF l_rc IS INITIAL.

      ch_s_outtab-status = &apos;@07@&apos;. &quot; ICON_UNLOCKED

    ELSE.

      &quot; TODO: tratar erro

    ENDIF.

    CALL METHOD o_alv-&gt;refresh_table_display
      EXPORTING
        i_soft_refresh = &apos;X&apos;
      EXCEPTIONS
        finished       = 1
        OTHERS         = 2.

    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

  ENDMETHOD.                    &quot;unlock

  METHOD new_password.

    DATA: lo_usw TYPE REF TO zcl_usw.

    DATA: l_rc  TYPE sysubrc,
          l_pwd TYPE string.

    lo_usw = zcl_usw=&gt;get_instance( ).

    IF i_auto = &apos;X&apos;.

      CALL METHOD lo_usw-&gt;internet_user_new_pwd
        EXPORTING
          i_objtype = ch_s_outtab-objtype
          i_id      = ch_s_outtab-objid
        IMPORTING
          e_rc      = l_rc
          e_pwd     = l_pwd.

    ELSE.

      CALL METHOD lo_usw-&gt;internet_user_new_pwd
        EXPORTING
          i_objtype = ch_s_outtab-objtype
          i_id      = ch_s_outtab-objid
          i_pwd     = me-&gt;new_internet_user_pwd
        IMPORTING
          e_rc      = l_rc
          e_pwd     = l_pwd.

    ENDIF.

    IF l_rc IS INITIAL.

      ch_s_outtab-status   = icon_unlocked.
      ch_s_outtab-password = l_pwd.

    ELSE.

      ch_s_outtab-status = icon_failure.

      &quot; A senha informada é fraca e não foi aceita
      MESSAGE i000(zrest) WITH text-009 DISPLAY LIKE &apos;E&apos;.

    ENDIF.

    CALL METHOD o_alv-&gt;refresh_table_display
      EXPORTING
        i_soft_refresh = &apos;X&apos;
      EXCEPTIONS
        finished       = 1
        OTHERS         = 2.

    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

  ENDMETHOD.                    &quot;new_password

  METHOD select_users.

    FIELD-SYMBOLS: &lt;lfs_ztbuswiu&gt;  TYPE ztbuswiu,
                   &lt;lfs_bapiusw01&gt; TYPE bapiusw01,
                   &lt;lfs_adr6&gt;      TYPE adr6,
                   &lt;lfs_adrc&gt;      TYPE adrc.

    DATA: lo_usw TYPE REF TO zcl_usw.

    DATA: lt_bapiusw01 TYPE STANDARD TABLE OF bapiusw01,
          lt_adr6      TYPE STANDARD TABLE OF adr6,
          lt_adrc      TYPE STANDARD TABLE OF adrc,
          lt_ztbuswiu  TYPE STANDARD TABLE OF ztbuswiu.

    DATA: ls_outtab LIKE LINE OF me-&gt;t_outtab.

    DATA: l_objid TYPE bapiusw01-objid,
          l_rc    TYPE sysubrc.

    SELECT * FROM ztbuswiu
        INTO CORRESPONDING FIELDS OF TABLE lt_ztbuswiu
        WHERE objtype = p_objtyp AND
              objid IN s_objid.

    IF s_email[] IS INITIAL .

      SELECT objtype objid uiddate ldate ltime FROM bapiusw01
        INTO CORRESPONDING FIELDS OF TABLE lt_bapiusw01
        WHERE objtype = p_objtyp AND
              objid IN s_objid.

    ENDIF.

    IF NOT lt_ztbuswiu[] IS INITIAL.

      SELECT addrnumber persnumber date_from consnumber smtp_addr
        FROM adr6
        INTO CORRESPONDING FIELDS OF TABLE lt_adr6
        FOR ALL ENTRIES IN lt_ztbuswiu
        WHERE addrnumber = lt_ztbuswiu-addrnumber AND
              smtp_addr IN s_email.

      SELECT addrnumber date_from nation name1 addr_group sort1 sort2
        FROM adrc
        INTO CORRESPONDING FIELDS OF TABLE lt_adrc
        FOR ALL ENTRIES IN lt_ztbuswiu
        WHERE addrnumber = lt_ztbuswiu-addrnumber.

      lo_usw = zcl_usw=&gt;get_instance( ).

    ENDIF.

    LOOP AT lt_ztbuswiu ASSIGNING &lt;lfs_ztbuswiu&gt;.

      CLEAR ls_outtab.

      ls_outtab-objtype    = &lt;lfs_ztbuswiu&gt;-objtype.
      ls_outtab-objid      = &lt;lfs_ztbuswiu&gt;-objid.
      ls_outtab-addrnumber = &lt;lfs_ztbuswiu&gt;-addrnumber.

      READ TABLE lt_bapiusw01 ASSIGNING &lt;lfs_bapiusw01&gt;
        WITH KEY objtype = &lt;lfs_ztbuswiu&gt;-objtype
                 objid   = &lt;lfs_ztbuswiu&gt;-objid.

      IF &lt;lfs_bapiusw01&gt; IS ASSIGNED AND sy-subrc IS INITIAL.
        ls_outtab-uiddate = &lt;lfs_bapiusw01&gt;-uiddate.
        ls_outtab-ldate   = &lt;lfs_bapiusw01&gt;-ldate.
        ls_outtab-ltime   = &lt;lfs_bapiusw01&gt;-ltime.
      ENDIF.

      READ TABLE lt_adr6 ASSIGNING &lt;lfs_adr6&gt;
        WITH KEY addrnumber = &lt;lfs_ztbuswiu&gt;-addrnumber.

      IF sy-subrc = 0.
        ls_outtab-smtp_addr = &lt;lfs_adr6&gt;-smtp_addr.
      ELSE.
        IF NOT s_email[] IS INITIAL.
          CONTINUE.
        ENDIF.
      ENDIF.

      READ TABLE lt_adrc ASSIGNING &lt;lfs_adrc&gt;
        WITH KEY addrnumber = &lt;lfs_ztbuswiu&gt;-addrnumber.

      IF sy-subrc = 0.
        ls_outtab-name       = &lt;lfs_adrc&gt;-name1.
        ls_outtab-addr_group = &lt;lfs_adrc&gt;-addr_group.
        ls_outtab-cpf        = &lt;lfs_adrc&gt;-sort1.
        ls_outtab-kostl      = &lt;lfs_adrc&gt;-sort2.
      ENDIF.

      CALL METHOD lo_usw-&gt;get_internet_user_status
        EXPORTING
          i_objtype = p_objtyp
          i_id      = &lt;lfs_ztbuswiu&gt;-objid
        RECEIVING
          r_rc      = l_rc.

      IF l_rc IS INITIAL.

        ls_outtab-status = &apos;@07@&apos;. &quot; ICON_UNLOCKED

      ELSEIF l_rc = 4. &quot; User doesn&apos;t exist

        ls_outtab-status = &apos;@00@&apos;. &quot;ICON_DUMMY

      ELSEIF l_rc = 8. &quot; User is locked

        ls_outtab-status = &apos;@06@&apos;. &quot; ICON_LOCKED

      ENDIF.

      APPEND ls_outtab TO me-&gt;t_outtab.

    ENDLOOP.

    LOOP AT lt_bapiusw01 ASSIGNING &lt;lfs_bapiusw01&gt;.

      READ TABLE lt_ztbuswiu TRANSPORTING NO FIELDS
        WITH KEY objtype = &lt;lfs_bapiusw01&gt;-objtype
                 objid   = &lt;lfs_bapiusw01&gt;-objid.

      IF sy-subrc = 0.
        CONTINUE.
      ENDIF.

      CLEAR ls_outtab.

      ls_outtab-objtype    = &lt;lfs_bapiusw01&gt;-objtype.
      ls_outtab-objid      = &lt;lfs_bapiusw01&gt;-objid.

      CALL METHOD lo_usw-&gt;get_internet_user_status
        EXPORTING
          i_objtype = p_objtyp
          i_id      = &lt;lfs_bapiusw01&gt;-objid
        RECEIVING
          r_rc      = l_rc.

      IF l_rc IS INITIAL.

        ls_outtab-status = icon_unlocked.

      ELSEIF l_rc = 4. &quot; User doesn&apos;t exist

        ls_outtab-status = icon_dummy.

      ELSEIF l_rc = 8. &quot; User is locked

        ls_outtab-status = icon_locked.

      ENDIF.

      APPEND ls_outtab TO me-&gt;t_outtab.

    ENDLOOP.

  ENDMETHOD.                    &quot;select_users

  METHOD change_fieldcat.

    FIELD-SYMBOLS: &lt;lfs_fieldcat&gt; TYPE LINE OF lvc_t_fcat.

    DATA: lt_fieldcat TYPE lvc_t_fcat.

    CALL METHOD o_alv-&gt;get_frontend_fieldcatalog
      IMPORTING
        et_fieldcatalog = lt_fieldcat.

    LOOP AT lt_fieldcat ASSIGNING &lt;lfs_fieldcat&gt;.

      CASE &lt;lfs_fieldcat&gt;-fieldname.
        WHEN &apos;NAME&apos;.
          &lt;lfs_fieldcat&gt;-outputlen = &apos;70&apos;.
        WHEN &apos;PASSWORD&apos;.
          &lt;lfs_fieldcat&gt;-tech = &apos;X&apos;.
        WHEN &apos;STATUS&apos;.
          &lt;lfs_fieldcat&gt;-outputlen = &apos;8&apos;.
          &lt;lfs_fieldcat&gt;-just = &apos;C&apos;.
        WHEN OTHERS.
          &lt;lfs_fieldcat&gt;-outputlen = &apos;20&apos;.
      ENDCASE.

    ENDLOOP.

    CALL METHOD o_alv-&gt;set_frontend_fieldcatalog
      EXPORTING
        it_fieldcatalog = lt_fieldcat.

    CALL METHOD o_alv-&gt;refresh_table_display
      EXCEPTIONS
        finished = 1
        OTHERS   = 2.

    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

  ENDMETHOD.                    &quot;change_fieldcat

  METHOD show_password.

    FIELD-SYMBOLS: &lt;lfs_fieldcat&gt; TYPE LINE OF lvc_t_fcat.

    DATA: lt_fieldcat TYPE lvc_t_fcat.

    CALL METHOD o_alv-&gt;get_frontend_fieldcatalog
      IMPORTING
        et_fieldcatalog = lt_fieldcat.

    READ TABLE lt_fieldcat ASSIGNING &lt;lfs_fieldcat&gt;
      WITH KEY fieldname = &apos;PASSWORD&apos;.

    IF &lt;lfs_fieldcat&gt; IS ASSIGNED.
      &lt;lfs_fieldcat&gt;-tech   = &apos; &apos;.
      &lt;lfs_fieldcat&gt;-no_out = &apos; &apos;.
    ENDIF.

    CALL METHOD o_alv-&gt;set_frontend_fieldcatalog
      EXPORTING
        it_fieldcatalog = lt_fieldcat.

    CALL METHOD o_alv-&gt;refresh_table_display
      EXCEPTIONS
        finished = 1
        OTHERS   = 2.

    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

  ENDMETHOD.                    &quot;show_password

  METHOD change_layout.

    DATA: ls_layout TYPE lvc_s_layo.

    CALL METHOD o_alv-&gt;get_frontend_layout
      IMPORTING
        es_layout = ls_layout.

    ls_layout-zebra      = &apos;X&apos;.
*    ls_layout-cwidth_opt = &apos;X&apos;.
    ls_layout-sel_mode   = &apos;A&apos;.

    CALL METHOD o_alv-&gt;set_frontend_layout
      EXPORTING
        is_layout = ls_layout.

    CALL METHOD o_alv-&gt;refresh_table_display
      EXCEPTIONS
        finished = 1
        OTHERS   = 2.

    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

  ENDMETHOD.                    &quot;change_layout

  METHOD init_gui_objects.

    IF NOT o_cc IS BOUND.

      CREATE OBJECT o_cc
        EXPORTING
          container_name              = &apos;CC&apos;
        EXCEPTIONS
          cntl_error                  = 1
          cntl_system_error           = 2
          create_error                = 3
          lifetime_error              = 4
          lifetime_dynpro_dynpro_link = 5
          OTHERS                      = 6.

      IF sy-subrc &lt;&gt; 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                   WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.

      CREATE OBJECT o_alv
        EXPORTING
          i_parent          = o_cc
        EXCEPTIONS
          error_cntl_create = 1
          error_cntl_init   = 2
          error_cntl_link   = 3
          error_dp_create   = 4
          OTHERS            = 5.

      IF sy-subrc &lt;&gt; 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                   WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.

      s_variant-report = sy-repid.

      IF NOT p_vrnt IS INITIAL.
        s_variant-variant = p_vrnt.

      ELSE.

        CALL FUNCTION &apos;REUSE_ALV_VARIANT_DEFAULT_GET&apos;
          EXPORTING
            i_save        = &apos;A&apos;
          CHANGING
            cs_variant    = s_variant
          EXCEPTIONS
            wrong_input   = 1
            not_found     = 2
            program_error = 3
            OTHERS        = 4.

      ENDIF.

      CALL METHOD o_alv-&gt;set_table_for_first_display
        EXPORTING
          i_bypassing_buffer            = &apos;X&apos;
          i_structure_name              = &apos;ZST_ALV_ZRUSW01&apos;
          is_variant                    = s_variant
          i_save                        = &apos;A&apos;
        CHANGING
          it_outtab                     = o_app-&gt;t_outtab
        EXCEPTIONS
          invalid_parameter_combination = 1
          program_error                 = 2
          too_many_lines                = 3
          OTHERS                        = 4.

      IF sy-subrc &lt;&gt; 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                   WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.

      o_app-&gt;change_fieldcat( ).

      o_app-&gt;change_layout( ).

    ENDIF.

  ENDMETHOD.                    &quot;init_gui_objects

  METHOD main.

    me-&gt;select_users( ).

    CALL SCREEN 9000.

  ENDMETHOD.                    &quot;main

ENDCLASS.                    &quot;lcl_application IMPLEMENTATION</source>
 </PROG>
 <PROG NAME="ZRUSW01_DEF" VARCL="X" SUBC="I" LEVL="700" RMAND="100" RLOAD="P" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Local class definitions" LENGTH="28 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  Include           ZRUSW01_DEF
*&amp;---------------------------------------------------------------------*

*---------------------------------------------------------------------*
*       CLASS lcl_application DEFINITION
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
CLASS lcl_application DEFINITION.

  PUBLIC SECTION.

    DATA: t_outtab TYPE STANDARD TABLE OF zst_alv_zrusw01.

    METHODS: main,
             change_fieldcat,
             change_layout,
             init_gui_objects,
             handle_user_command.

  PRIVATE SECTION.

    DATA: new_internet_user_pwd TYPE string.

    METHODS: select_users,
             lock         CHANGING ch_s_outtab TYPE zst_alv_zrusw01,
             unlock       CHANGING ch_s_outtab TYPE zst_alv_zrusw01,
             new_password IMPORTING i_auto TYPE char1 DEFAULT &apos;X&apos;
                          CHANGING ch_s_outtab TYPE zst_alv_zrusw01,
             show_password.

ENDCLASS.                    &quot;lcl_application DEFINITION</source>
 </PROG>
 <PROG NAME="ZRUSW01_TOP" VARCL="X" SUBC="I" LEVL="700" RMAND="100" RLOAD="P" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Include TOP" LENGTH="11 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  Include           ZRUSW01_TOP
*&amp;---------------------------------------------------------------------*

CLASS lcl_application DEFINITION DEFERRED.

TABLES: ztbuswiu, adr6.

DATA: o_app TYPE REF TO lcl_application,
      o_cc  TYPE REF TO cl_gui_custom_container,
      o_alv TYPE REF TO cl_gui_alv_grid.

DATA: s_variant TYPE disvariant,
      okcode    LIKE sy-ucomm.

SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-001.
PARAMETERS: p_objtyp TYPE bapiusw01-objtype OBLIGATORY.
SELECT-OPTIONS: s_objid FOR ztbuswiu-objid,
                s_email FOR adr6-smtp_addr.
SELECTION-SCREEN END OF BLOCK b1.

SELECTION-SCREEN BEGIN OF BLOCK b2 WITH FRAME TITLE text-010.
PARAMETERS: p_vrnt TYPE disvariant-variant.
SELECTION-SCREEN END OF BLOCK b2.</source>
 </PROG>
 <PROG NAME="ZRUSW01" VARCL="X" SUBC="1" RMAND="100" RLOAD="E" FIXPT="X" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="I" KEY="001" ENTRY="Parâmetros de seleção" LENGTH="21 "/>
    <textElement ID="I" KEY="002" ENTRY="No record selected" LENGTH="30 "/>
    <textElement ID="I" KEY="003" ENTRY="Action is not supported" LENGTH="30 "/>
    <textElement ID="I" KEY="004" ENTRY="Action canceled" LENGTH="20 "/>
    <textElement ID="I" KEY="005" ENTRY="Would you like to generate the password automatically?" LENGTH="60 "/>
    <textElement ID="I" KEY="006" ENTRY="Please inform the new password" LENGTH="30 "/>
    <textElement ID="I" KEY="007" ENTRY="New password" LENGTH="20 "/>
    <textElement ID="I" KEY="008" ENTRY="Password must have 8 to 10 characters, letters and numbers" LENGTH="70 "/>
    <textElement ID="I" KEY="009" ENTRY="The password was rejected due to system settings" LENGTH="50 "/>
    <textElement ID="I" KEY="010" ENTRY="ALV Layout" LENGTH="18 "/>
    <textElement ID="R" ENTRY="User Switch - Maintain Internet Users" LENGTH="37 "/>
    <textElement ID="S" KEY="P_OBJTYP" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="P_VRNT" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="S_EMAIL" ENTRY="D       ." LENGTH="26 "/>
    <textElement ID="S" KEY="S_OBJID" ENTRY="D       ." LENGTH="27 "/>
   </language>
  </textPool>
  <dynpros>
   <dynpro PROG="ZRUSW01" DNUM="9000" FNUM="9000" BZMX="200 " BZBR="240 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="200 " NOCO="240 " VALP="0 " CUAN="G" SPRA="E" DTEXT="">
    <dynprofield FNAM="CC" DIDX="00C8" FLG1="00" FLG2="30" FLG3="00" FILL="U" FMB1="30" FMB2="00" LENG="F0" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" AUTH="102" AGLT="0A" ADEZ="0A"/>
    <dynprofield FNAM="OKCODE" DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.

  MODULE status_9000.

  MODULE ini_comp.

PROCESS AFTER INPUT.

  MODULE exit AT EXIT-COMMAND.

  MODULE user_command_9000.</dynproflowsource>
   </dynpro>
  </dynpros>
  <pfstatus>
   <pfstatus_sta CODE="PF9000" MODAL="D" ACTCODE="000001" PFKCODE="000001" BUTCODE="0001" INT_NOTE="Menu tela 9000"/>
   <pfstatus_fun CODE="BACK" TEXTNO="001" TYPE="E" TEXT_TYPE="S" FUN_TEXT="Voltar"/>
   <pfstatus_fun CODE="CANCEL" TEXTNO="001" TYPE="E" TEXT_TYPE="S" TEXT_NAME="ICON_CANCEL" ICON_ID="@0W@" FUN_TEXT="Cancelar"/>
   <pfstatus_fun CODE="EXIT" TEXTNO="001" TYPE="E" TEXT_TYPE="S" FUN_TEXT="Encerrar"/>
   <pfstatus_fun CODE="LOCK" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_LOCKED" ICON_ID="@06@" FUN_TEXT="Bloquear usuário" INFO_TEXT="Bloquear"/>
   <pfstatus_fun CODE="NEW_PWD" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_CHANGE_PASSWORD" ICON_ID="@I9@" FUN_TEXT="Alterar/criar senha usuário" INFO_TEXT="Alterar/criar senha"/>
   <pfstatus_fun CODE="UNLOCK" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_UNLOCKED" ICON_ID="@07@" FUN_TEXT="Desbloquear usuário" INFO_TEXT="Desbloquear"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="01" PFNO="13"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="02" PFNO="14"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="03" PFNO="16"/>
   <pfstatus_pfk CODE="000001" PFNO="03" FUNCODE="BACK" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="12" FUNCODE="CANCEL" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="13" FUNCODE="LOCK" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="14" FUNCODE="UNLOCK" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="15" FUNCODE="EXIT" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="16" FUNCODE="NEW_PWD" FUNNO="001"/>
   <pfstatus_set STATUS="PF9000" FUNCTION="BACK"/>
   <pfstatus_set STATUS="PF9000" FUNCTION="CANCEL"/>
   <pfstatus_set STATUS="PF9000" FUNCTION="EXIT"/>
   <pfstatus_set STATUS="PF9000" FUNCTION="LOCK"/>
   <pfstatus_set STATUS="PF9000" FUNCTION="NEW_PWD"/>
   <pfstatus_set STATUS="PF9000" FUNCTION="UNLOCK"/>
   <pfstatus_doc OBJ_TYPE="A" OBJ_CODE="000001" MODAL="D" INT_NOTE="Menu tela 9000"/>
   <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="000001" MODAL="D" INT_NOTE="Menu tela 9000"/>
   <pfstatus_doc OBJ_TYPE="B" OBJ_CODE="000001" SUB_CODE="0001" MODAL="D" INT_NOTE="Menu tela 9000"/>
   <pfstatus_tit CODE="TB9000" TEXT="Manutenção Usuários Portal de Compras"/>
  </pfstatus>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  ZRUSW01
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp; User Switch - Maintain Internet Users
*&amp;---------------------------------------------------------------------*

REPORT zrusw01.

INCLUDE: zrusw01_top,
         zrusw01_def,
         zrusw01_imp,
         zrusw01_pbo,
         zrusw01_pai.

***********************************************************************
* INITIALIZATION                                                      *
***********************************************************************
INITIALIZATION.

  CREATE OBJECT o_app.

***********************************************************************
* AT SELECTION-SCREEN ON VALUE-REQUEST FOR ...                        *
***********************************************************************
AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_vrnt.

  s_variant-report = sy-repid.

  CALL FUNCTION &apos;REUSE_ALV_VARIANT_F4&apos;
    EXPORTING
      is_variant                = s_variant
*   I_TABNAME_HEADER          =
*   I_TABNAME_ITEM            =
*   IT_DEFAULT_FIELDCAT       =
*   I_SAVE                    = &apos; &apos;
     i_display_via_grid        = &apos;X&apos;
   IMPORTING
     es_variant                = s_variant
   EXCEPTIONS
     not_found                 = 0
     program_error             = 0
     OTHERS                    = 0.

  p_vrnt = s_variant-variant.


***********************************************************************
* START-OF-SELECTION                                                  *
***********************************************************************
START-OF-SELECTION.

  CALL METHOD o_app-&gt;main.</source>
 </PROG>
 <PROG NAME="ZRUSW00_PAI" VARCL="X" SUBC="I" LEVL="700" RMAND="200" RLOAD="P" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="PAI Modules" LENGTH="11 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  Include           ZRUSW00_PAI
*&amp;---------------------------------------------------------------------*

*&amp;---------------------------------------------------------------------*
*&amp;      Module  EXIT  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE exit INPUT.

  o_app-&gt;handle_exit_command( ).

ENDMODULE.                 &quot; EXIT  INPUT

*&amp;---------------------------------------------------------------------*
*&amp;      Module  user_command_9000  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_9000 INPUT.

  o_app-&gt;user_command_9000( ).

ENDMODULE.                 &quot; user_command_9000  INPUT</source>
 </PROG>
 <PROG NAME="ZRUSW00_PBO" VARCL="X" SUBC="I" LEVL="700" RMAND="200" RLOAD="P" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="PBO Modules" LENGTH="11 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  Include           ZRUSW00_PBO
*&amp;---------------------------------------------------------------------*

*&amp;---------------------------------------------------------------------*
*&amp;      Module  STATUS_9000  OUTPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_9000 OUTPUT.

  o_app-&gt;status_9000( ).

ENDMODULE.                 &quot; STATUS_9000  OUTPUT</source>
 </PROG>
 <PROG NAME="ZRUSW00_IMP" VARCL="X" SUBC="I" LEVL="700" RMAND="200" RLOAD="P" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Local class implementation" LENGTH="26 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  Include           ZRUSW00_IMP
*&amp;---------------------------------------------------------------------*

*---------------------------------------------------------------------*
*       CLASS lcl_application IMPLEMENTATION
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
CLASS lcl_application IMPLEMENTATION.

  METHOD get_instance.

    IF NOT lcl_application=&gt;ref IS BOUND.
      CREATE OBJECT lcl_application=&gt;ref.
    ENDIF.

    r_ref = lcl_application=&gt;ref.

  ENDMETHOD.                    &quot;get_instance

*  METHOD initialization.
*
*  ENDMETHOD.                    &quot;initialization

  METHOD selection_screen_output.

    LOOP AT SCREEN.

      IF NOT p_iu IS INITIAL.
        IF ( screen-group1 = &apos;DU&apos; ) OR ( screen-group1 = &apos;UA&apos; ).
          screen-input = 0.
          screen-invisible = 1.
          MODIFY SCREEN.
        ENDIF.
      ENDIF.

      IF NOT p_du IS INITIAL.
        IF ( screen-group1 = &apos;IU&apos; ) OR ( screen-group1 = &apos;UA&apos; ).
          screen-input = 0.
          screen-invisible = 1.
          MODIFY SCREEN.
        ENDIF.
      ENDIF.

      IF NOT p_ua IS INITIAL.
        IF ( screen-group1 = &apos;IU&apos; ) OR ( screen-group1 = &apos;DU&apos; ).
          screen-input = 0.
          screen-invisible = 1.
          MODIFY SCREEN.
        ENDIF.
      ENDIF.

    ENDLOOP.

  ENDMETHOD.                    &quot;selection_screen_output

  METHOD main.

    me-&gt;select_data( ).

    CALL SCREEN 9000.

  ENDMETHOD.                    &quot;main

  METHOD status_9000.

    DATA: lt_okcodes LIKE STANDARD TABLE OF sy-ucomm.

    IF p_iu IS INITIAL.
      APPEND &apos;ADDR&apos; TO lt_okcodes.
    ENDIF.

    IF p_du IS INITIAL.
      APPEND &apos;PASS&apos; TO lt_okcodes.
    ENDIF.

    SET PF-STATUS &apos;PF9000&apos; EXCLUDING lt_okcodes.
    SET TITLEBAR &apos;TB9000&apos; WITH text-004.

    me-&gt;init_gui_components( ).

  ENDMETHOD.                    &quot;status_9000

  METHOD init_gui_components.

    FIELD-SYMBOLS: &lt;lfs_outtab&gt; TYPE ANY TABLE.

    DATA: ls_layout TYPE lvc_s_layo.

    DATA: l_structure_name(30) TYPE c.

    IF NOT o_cc IS BOUND.

      CREATE OBJECT o_cc
        EXPORTING
          container_name              = &apos;CC&apos;
        EXCEPTIONS
          cntl_error                  = 1
          cntl_system_error           = 2
          create_error                = 3
          lifetime_error              = 4
          lifetime_dynpro_dynpro_link = 5
          OTHERS                      = 6.

      IF sy-subrc &lt;&gt; 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                  WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.

      CREATE OBJECT o_alv
        EXPORTING
          i_parent          = o_cc
        EXCEPTIONS
          error_cntl_create = 1
          error_cntl_init   = 2
          error_cntl_link   = 3
          error_dp_create   = 4
          OTHERS            = 5.

      IF sy-subrc &lt;&gt; 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                   WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.

      SET HANDLER me-&gt;handle_changed_finished FOR o_alv.
      SET HANDLER me-&gt;handle_data_changed     FOR o_alv.

      CALL METHOD o_alv-&gt;register_edit_event
        EXPORTING
          i_event_id = cl_gui_alv_grid=&gt;mc_evt_modified.

      IF NOT p_iu IS INITIAL.
        ASSIGN me-&gt;t_outtab_iu TO &lt;lfs_outtab&gt;.
        l_structure_name = &apos;ZSTUSWIU_ALV&apos;.
      ENDIF.

      IF NOT p_du IS INITIAL.
        ASSIGN me-&gt;t_outtab_du TO &lt;lfs_outtab&gt;.
        l_structure_name = &apos;ZSTUSWDU_ALV&apos;.
      ENDIF.

      IF NOT p_ua IS INITIAL.
        ASSIGN me-&gt;t_outtab_ua TO &lt;lfs_outtab&gt;.
        l_structure_name = &apos;ZSTUSWUA_ALV&apos;.
      ENDIF.

      IF NOT &lt;lfs_outtab&gt; IS ASSIGNED OR l_structure_name IS INITIAL.
        &quot; TODO: handle error...
        EXIT.
      ENDIF.

      ls_layout-sel_mode   = &apos;A&apos;.
      ls_layout-stylefname = &apos;CELLSTYLES&apos;.

      o_alv-&gt;set_table_for_first_display(
        EXPORTING
          i_bypassing_buffer            = &apos;X&apos;
          i_structure_name              = l_structure_name
          is_variant                    = disvariant
          i_save                        = &apos;A&apos;
          is_layout                     = ls_layout
        CHANGING
          it_outtab                     = &lt;lfs_outtab&gt;
        EXCEPTIONS
          invalid_parameter_combination = 1
          program_error                 = 2
          too_many_lines                = 3
          OTHERS                        = 4
      ).

      me-&gt;change_fieldcat( ).

    ENDIF.

  ENDMETHOD.                    &quot;init_gui_components

  METHOD change_fieldcat.

    FIELD-SYMBOLS: &lt;lfs_fcat&gt; TYPE lvc_s_fcat.

    &quot; Internal tables
    DATA: lt_fcat TYPE lvc_t_fcat.

    o_alv-&gt;get_frontend_fieldcatalog(
      IMPORTING
        et_fieldcatalog = lt_fcat
    ).

    LOOP AT lt_fcat ASSIGNING &lt;lfs_fcat&gt;.

      IF NOT p_iu IS INITIAL.

        CASE &lt;lfs_fcat&gt;-fieldname.

          WHEN &apos;OBJTYPE&apos; OR &apos;OBJID&apos;.

            &lt;lfs_fcat&gt;-edit = &apos;X&apos;.

          WHEN OTHERS.

            &quot; Do nothing...

        ENDCASE.

      ENDIF.

      IF NOT p_du IS INITIAL.

        CASE &lt;lfs_fcat&gt;-fieldname.

          WHEN &apos;BNAME&apos;.

            &lt;lfs_fcat&gt;-edit = &apos;X&apos;.

          WHEN &apos;PASSWORD&apos;.

            &lt;lfs_fcat&gt;-tech = &apos;X&apos;.

          WHEN OTHERS.

            &quot; Do nothing...

        ENDCASE.

      ENDIF.

      IF NOT p_ua IS INITIAL.

        CASE &lt;lfs_fcat&gt;-fieldname.

          WHEN &apos;OBJTYPE&apos; OR &apos;OBJID&apos; OR &apos;BNAME&apos; OR &apos;APPID&apos; OR &apos;PKEY&apos;.

            &lt;lfs_fcat&gt;-edit = &apos;X&apos;.

          WHEN &apos;REFUSER&apos;.

            &lt;lfs_fcat&gt;-edit = &apos;X&apos;.
            &lt;lfs_fcat&gt;-checkbox = &apos;X&apos;.
            &lt;lfs_fcat&gt;-outputlen = 10.

          WHEN &apos;CHANGED&apos;.

            &lt;lfs_fcat&gt;-tech = &apos;X&apos;.

          WHEN OTHERS.

            &quot; Do nothing...

        ENDCASE.

      ENDIF.

    ENDLOOP.

    o_alv-&gt;set_frontend_fieldcatalog(
      EXPORTING
        it_fieldcatalog = lt_fcat
    ).

    o_alv-&gt;refresh_table_display(
      EXCEPTIONS
        finished  = 1
        OTHERS    = 2
    ).

    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

  ENDMETHOD.                    &quot;change_fieldcat

  METHOD handle_exit_command.

    DATA: l_cancel TYPE abap_bool.

    CASE lcl_application=&gt;okcode.

      WHEN &apos;BACK&apos; OR &apos;CANCEL&apos;.

        l_cancel = me-&gt;check_data_loss( ).

        IF l_cancel = abap_false.
          LEAVE TO SCREEN 0.
        ENDIF.

      WHEN &apos;EXIT&apos;.

        me-&gt;check_data_loss( ).

        IF l_cancel = abap_false.
          LEAVE PROGRAM.
        ENDIF.

      WHEN OTHERS.
        &quot;Unexpected exit command... do nothing...

    ENDCASE.

  ENDMETHOD.                    &quot;exit

  METHOD alv_variant_f4.

    DATA: ls_variant TYPE disvariant.

    ls_variant-report = sy-repid.
    ls_variant-handle = i_handle.

    CALL FUNCTION &apos;REUSE_ALV_VARIANT_F4&apos;
      EXPORTING
        is_variant         = ls_variant
        i_save             = &apos;A&apos;
        i_display_via_grid = &apos;X&apos;
      IMPORTING
        es_variant         = ls_variant
      EXCEPTIONS
        not_found          = 0
        program_error      = 0
        OTHERS             = 0.

    ch_variant = ls_variant-variant.

  ENDMETHOD.                    &quot;alv_variant_f4

  METHOD user_command_9000.

    IF okcode = &apos;ADDR&apos;.

      IF NOT p_iu IS INITIAL.

        me-&gt;maintain_address_iu( ).

      ENDIF.

    ENDIF.

    IF okcode = &apos;PASS&apos;.

      CLEAR okcode.

      IF NOT p_du IS INITIAL.

        me-&gt;maintain_password_du( ).

      ENDIF.

    ENDIF.

    IF okcode = &apos;SAVE&apos;.

      IF NOT p_iu IS INITIAL.

        me-&gt;save_iu_changes( ).

      ENDIF.

      IF NOT p_du IS INITIAL.

        me-&gt;save_du_changes( ).

      ENDIF.

      IF NOT p_ua IS INITIAL.

        me-&gt;save_ua_changes( ).

      ENDIF.

    ENDIF.

  ENDMETHOD.                    &quot;user_command_9000

  METHOD select_data.

    TYPES: BEGIN OF local_type_adrc,
             addrnumber TYPE adrc-addrnumber,
             date_from  TYPE adrc-date_from,
             nation     TYPE adrc-nation,
             name1      TYPE adrc-name1,
             name2      TYPE adrc-name2,
             addr_group TYPE adrc-addr_group,
             sort1      TYPE adrc-sort1,
             sort2      TYPE adrc-sort2,
           END OF local_type_adrc,

           BEGIN OF local_type_usr21,
             bname      TYPE usr21-bname,
             persnumber TYPE usr21-persnumber,
             addrnumber TYPE usr21-addrnumber,
           END OF local_type_usr21,

           BEGIN OF local_type_adrp,
             persnumber TYPE adrp-persnumber,
             date_from  TYPE adrp-date_from,
             nation     TYPE adrp-nation,
             name_first TYPE adrp-name_first,
             name_last  TYPE adrp-name_last,
           END OF local_type_adrp.

    DATA: lt_adrc  TYPE STANDARD TABLE OF local_type_adrc,
          lt_usr21 TYPE STANDARD TABLE OF local_type_usr21,
          lt_adrp  TYPE STANDARD TABLE OF local_type_adrp.

    DATA: ls_adrc  TYPE local_type_adrc,
          ls_usr21 TYPE local_type_usr21,
          ls_adrp  TYPE local_type_adrp.

    IF NOT p_iu IS INITIAL.

      FIELD-SYMBOLS: &lt;lfs_iu&gt; LIKE LINE OF me-&gt;t_outtab_iu,
                     &lt;lfs_du&gt; LIKE LINE OF me-&gt;t_outtab_du,
                     &lt;lfs_ua&gt; LIKE LINE OF me-&gt;t_outtab_ua.

      &quot; Internal tables
      DATA: lt_cellstyles TYPE lvc_t_styl.

      &quot; Structures
      DATA: ls_cellstyle  TYPE lvc_s_styl.

      SELECT * FROM ztbuswiu
        INTO CORRESPONDING FIELDS OF TABLE me-&gt;t_outtab_iu
        WHERE objtype IN s_objtp AND
              objid IN s_objid.

      IF NOT me-&gt;t_outtab_iu[] IS INITIAL.

        SELECT addrnumber date_from nation name1
               name2 addr_group sort1 sort2
          FROM adrc
          INTO CORRESPONDING FIELDS OF TABLE lt_adrc
          FOR ALL ENTRIES IN me-&gt;t_outtab_iu
          WHERE addrnumber = me-&gt;t_outtab_iu-addrnumber.

      ENDIF.

      ls_cellstyle-fieldname = &apos;OBJID&apos;.
      ls_cellstyle-style     = cl_gui_alv_grid=&gt;mc_style_disabled.

      APPEND ls_cellstyle TO lt_cellstyles.

      ls_cellstyle-fieldname = &apos;OBJTYPE&apos;.

      APPEND ls_cellstyle TO lt_cellstyles.

      LOOP AT me-&gt;t_outtab_iu ASSIGNING &lt;lfs_iu&gt;.

        READ TABLE lt_adrc INTO ls_adrc
          WITH KEY addrnumber = &lt;lfs_iu&gt;-addrnumber.

        IF sy-subrc = 0.

          &lt;lfs_iu&gt;-name1      = ls_adrc-name1.
          &lt;lfs_iu&gt;-name2      = ls_adrc-name2.
          &lt;lfs_iu&gt;-addr_group = ls_adrc-addr_group.
          &lt;lfs_iu&gt;-sort1      = ls_adrc-sort1.
          &lt;lfs_iu&gt;-sort2      = ls_adrc-sort2.

        ENDIF.

        &lt;lfs_iu&gt;-cellstyles[] = lt_cellstyles.

      ENDLOOP.

    ENDIF.

    IF NOT p_du IS INITIAL.

      SELECT bname FROM ztbuswdu
        INTO CORRESPONDING FIELDS OF TABLE me-&gt;t_outtab_du
        WHERE bname IN s_bname.

      IF NOT me-&gt;t_outtab_du[] IS INITIAL.

        SELECT bname persnumber addrnumber FROM usr21
          INTO CORRESPONDING FIELDS OF TABLE lt_usr21
          FOR ALL ENTRIES IN me-&gt;t_outtab_du
          WHERE bname = me-&gt;t_outtab_du-bname.

        IF NOT lt_usr21[] IS INITIAL.

          SELECT persnumber date_from nation name_first name_last
            FROM adrp
            INTO CORRESPONDING FIELDS OF TABLE lt_adrp
            FOR ALL ENTRIES IN lt_usr21
            WHERE persnumber = lt_usr21-persnumber.

        ENDIF.

      ENDIF.

      ls_cellstyle-fieldname = &apos;BNAME&apos;.
      ls_cellstyle-style     = cl_gui_alv_grid=&gt;mc_style_disabled.

      APPEND ls_cellstyle TO lt_cellstyles.

      LOOP AT me-&gt;t_outtab_du ASSIGNING &lt;lfs_du&gt;.

        CLEAR: ls_usr21, ls_adrp.

        READ TABLE lt_usr21 INTO ls_usr21
          WITH KEY bname = &lt;lfs_du&gt;-bname.

        IF sy-subrc = 0.

          READ TABLE lt_adrp INTO ls_adrp
            WITH KEY persnumber = ls_usr21-persnumber.

          IF sy-subrc = 0.

            &lt;lfs_du&gt;-name_first = ls_adrp-name_first.
            &lt;lfs_du&gt;-name_last = ls_adrp-name_last.

          ENDIF.

        ENDIF.

        &lt;lfs_du&gt;-cellstyles[] = lt_cellstyles.

      ENDLOOP.

    ENDIF.

    IF NOT p_ua IS INITIAL.

      SELECT * FROM ztbuswua
        INTO CORRESPONDING FIELDS OF TABLE me-&gt;t_outtab_ua
        WHERE objtype IN s_objtp2 AND
              objid   IN s_objid2 AND
              bname   IN s_bname2 AND
              appid   IN s_appid.

      ls_cellstyle-fieldname = &apos;APPID&apos;.
      ls_cellstyle-style     = cl_gui_alv_grid=&gt;mc_style_disabled.

      APPEND ls_cellstyle TO lt_cellstyles.

      ls_cellstyle-fieldname = &apos;OBJID&apos;.

      APPEND ls_cellstyle TO lt_cellstyles.

      ls_cellstyle-fieldname = &apos;OBJTYPE&apos;.

      APPEND ls_cellstyle TO lt_cellstyles.

      LOOP AT me-&gt;t_outtab_ua ASSIGNING &lt;lfs_ua&gt;.

        &lt;lfs_ua&gt;-cellstyles[] = lt_cellstyles[].

      ENDLOOP.

    ENDIF.

  ENDMETHOD.                    &quot;select_data

  METHOD handle_changed_finished.

    FIELD-SYMBOLS: &lt;lfs_iu&gt; LIKE LINE OF me-&gt;t_outtab_iu,
                   &lt;lfs_du&gt; LIKE LINE OF me-&gt;t_outtab_du,
                   &lt;lfs_ua&gt; LIKE LINE OF me-&gt;t_outtab_ua.

    &quot; Internal tables
    DATA: lt_good_cells LIKE et_good_cells.

    &quot; Structures
    DATA: ls_stable     TYPE lvc_s_stbl,
          ls_good_cells LIKE LINE OF et_good_cells.

    IF NOT p_iu IS INITIAL.

      LOOP AT me-&gt;t_outtab_iu ASSIGNING &lt;lfs_iu&gt;
        WHERE cellstyles IS INITIAL.

        CLEAR &lt;lfs_iu&gt;-addrnumber.

      ENDLOOP.

      IF sy-subrc IS INITIAL.

        ls_stable-row = &apos;X&apos;.
        ls_stable-col = &apos;X&apos;.

        o_alv-&gt;refresh_table_display(
          EXPORTING
            is_stable      = ls_stable
          EXCEPTIONS
            finished       = 1
            OTHERS         = 2
        ).

      ENDIF.

    ENDIF.

    IF NOT p_du IS INITIAL.

      lt_good_cells[] = et_good_cells[].

      SORT lt_good_cells BY row_id.

      DELETE ADJACENT DUPLICATES FROM lt_good_cells COMPARING row_id.

      LOOP AT lt_good_cells INTO ls_good_cells.

        READ TABLE me-&gt;t_outtab_du ASSIGNING &lt;lfs_du&gt;
          INDEX ls_good_cells-row_id.

        IF &lt;lfs_du&gt; IS ASSIGNED.

          me-&gt;get_du_data(
            EXPORTING
              i_bname = &lt;lfs_du&gt;-bname
            CHANGING
              ch_du = &lt;lfs_du&gt;
          ).

          UNASSIGN &lt;lfs_du&gt;.

        ENDIF.

      ENDLOOP.

      LOOP AT me-&gt;t_outtab_du TRANSPORTING NO FIELDS
        WHERE cellstyles IS INITIAL.
        EXIT.
      ENDLOOP.

      IF sy-subrc IS INITIAL.

        ls_stable-row = &apos;X&apos;.
        ls_stable-col = &apos;X&apos;.

        o_alv-&gt;refresh_table_display(
          EXPORTING
            is_stable      = ls_stable
          EXCEPTIONS
            finished       = 1
            OTHERS         = 2
        ).

      ENDIF.

    ENDIF.

    IF NOT p_ua IS INITIAL.

      lt_good_cells[] = et_good_cells[].

      SORT lt_good_cells BY row_id.

      DELETE ADJACENT DUPLICATES FROM lt_good_cells COMPARING row_id.

      LOOP AT lt_good_cells INTO ls_good_cells.

        READ TABLE me-&gt;t_outtab_ua ASSIGNING &lt;lfs_ua&gt;
          INDEX ls_good_cells-row_id.

        IF &lt;lfs_ua&gt; IS ASSIGNED.

          &lt;lfs_ua&gt;-changed = abap_true.

          UNASSIGN &lt;lfs_ua&gt;.

        ENDIF.

      ENDLOOP.

      LOOP AT me-&gt;t_outtab_ua TRANSPORTING NO FIELDS
        WHERE cellstyles IS INITIAL.
        EXIT.
      ENDLOOP.

      IF sy-subrc IS INITIAL.

        ls_stable-row = &apos;X&apos;.
        ls_stable-col = &apos;X&apos;.

        o_alv-&gt;refresh_table_display(
          EXPORTING
            is_stable      = ls_stable
          EXCEPTIONS
            finished       = 1
            OTHERS         = 2
        ).

      ENDIF.

    ENDIF.

  ENDMETHOD.                    &quot;handle_changed_finished

  METHOD get_du_data.

    TYPES: BEGIN OF local_type_usr21,
             bname      TYPE usr21-bname,
             persnumber TYPE usr21-persnumber,
             addrnumber TYPE usr21-addrnumber,
           END OF local_type_usr21,

           BEGIN OF local_type_adrp,
             persnumber TYPE adrp-persnumber,
             date_from  TYPE adrp-date_from,
             nation     TYPE adrp-nation,
             name_first TYPE adrp-name_first,
             name_last  TYPE adrp-name_last,
           END OF local_type_adrp.

    &quot; Internal tables
    DATA: lt_adrp  TYPE STANDARD TABLE OF local_type_adrp.

    &quot; Structures
    DATA: ls_usr21 TYPE local_type_usr21,
          ls_adrp  TYPE local_type_adrp.

    SELECT SINGLE bname persnumber persnumber FROM usr21
      INTO ls_usr21
      WHERE bname = i_bname.

    SELECT persnumber date_from nation name_first name_last FROM adrp
      INTO TABLE lt_adrp
      WHERE persnumber = ls_usr21-persnumber AND
            date_from &lt;= sy-datum.

    IF sy-subrc = 0.

      READ TABLE lt_adrp INTO ls_adrp INDEX 1.

      ch_du-name_first = ls_adrp-name_first.
      ch_du-name_last = ls_adrp-name_last.

    ENDIF.

  ENDMETHOD.                    &quot;get_du_data

  METHOD handle_data_changed.

    &quot; Structures
    DATA: ls_deleted_row TYPE lvc_s_moce,
          ls_iu LIKE LINE OF me-&gt;t_outtab_iu,
          ls_du LIKE LINE OF me-&gt;t_outtab_du,
          ls_ua LIKE LINE OF me-&gt;t_outtab_ua.

    IF NOT p_iu IS INITIAL.

      LOOP AT er_data_changed-&gt;mt_deleted_rows INTO ls_deleted_row.

        READ TABLE me-&gt;t_outtab_iu INTO ls_iu INDEX ls_deleted_row-row_id.

        IF NOT ls_iu-cellstyles[] IS INITIAL.
          APPEND ls_iu TO me-&gt;t_outtab_iu_del.
        ENDIF.

      ENDLOOP.

    ENDIF.

    IF NOT p_du IS INITIAL.

      LOOP AT er_data_changed-&gt;mt_deleted_rows INTO ls_deleted_row.

        READ TABLE me-&gt;t_outtab_du INTO ls_du INDEX ls_deleted_row-row_id.

        IF NOT ls_du-cellstyles[] IS INITIAL.
          APPEND ls_du TO me-&gt;t_outtab_du_del.
        ENDIF.

      ENDLOOP.

    ENDIF.

    IF NOT p_ua IS INITIAL.

      LOOP AT er_data_changed-&gt;mt_deleted_rows INTO ls_deleted_row.

        READ TABLE me-&gt;t_outtab_ua INTO ls_ua INDEX ls_deleted_row-row_id.

        IF NOT ls_du-cellstyles[] IS INITIAL.
          APPEND ls_ua TO me-&gt;t_outtab_ua_del.
        ENDIF.

      ENDLOOP.

    ENDIF.

  ENDMETHOD.                    &quot;handle_data_changed

  METHOD save_iu_changes.

    FIELD-SYMBOLS: &lt;lfs_iu&gt; LIKE LINE OF me-&gt;t_outtab_iu.

    &quot; Internal tables
    DATA: lt_cellstyles TYPE lvc_t_styl,
          lt_tsadrv     TYPE STANDARD TABLE OF tsadrv.

    &quot; Structures
    DATA: ls_cellstyle  TYPE lvc_s_styl,
          ls_stable     TYPE lvc_s_stbl,
          ls_addr_ref   TYPE addr_ref,
          ls_tsadrv     TYPE tsadrv,
          ls_iu         TYPE ztbuswiu.

    &quot; Elementary
    DATA: l_addr_deleted TYPE abap_bool.

    LOOP AT me-&gt;t_outtab_iu_del ASSIGNING &lt;lfs_iu&gt;.

      IF ( NOT &lt;lfs_iu&gt;-objtype IS INITIAL ) AND ( NOT &lt;lfs_iu&gt;-objid IS INITIAL ).

        DELETE FROM ztbuswiu WHERE objtype = &lt;lfs_iu&gt;-objtype AND
                                   objid   = &lt;lfs_iu&gt;-objid.

        IF NOT &lt;lfs_iu&gt;-addrnumber IS INITIAL.

          SELECT * FROM tsadrv INTO TABLE lt_tsadrv
            UP TO 1 ROWS
            WHERE tablename = &apos;ZTBUSWIU&apos;.

          IF sy-subrc = 0.

            READ TABLE lt_tsadrv INTO ls_tsadrv INDEX 1.

            CONCATENATE sy-mandt &lt;lfs_iu&gt;-objtype &lt;lfs_iu&gt;-objid
              INTO ls_addr_ref-appl_key
              RESPECTING BLANKS.

            ls_addr_ref-appl_table = ls_tsadrv-tablename.
            ls_addr_ref-appl_field = ls_tsadrv-fieldname.
            ls_addr_ref-addr_group = ls_tsadrv-addr_group.
            ls_addr_ref-owner      = &apos;X&apos;.

            CALL FUNCTION &apos;ADDR_DELETE&apos;
              EXPORTING
                address_number      = &lt;lfs_iu&gt;-addrnumber
                address_reference   = ls_addr_ref
              EXCEPTIONS
                address_not_exist   = 1
                parameter_error     = 2
                internal_error      = 3
                reference_not_exist = 4
                OTHERS              = 5.

            IF sy-subrc = 0.
              l_addr_deleted = abap_true.
            ENDIF.

          ENDIF.

        ENDIF.

      ENDIF.

    ENDLOOP.

    IF NOT l_addr_deleted IS INITIAL.

      CALL FUNCTION &apos;ADDR_MEMORY_SAVE&apos;
*       EXPORTING
*         EXECUTE_IN_UPDATE_TASK       = &apos; &apos;
       EXCEPTIONS
         address_number_missing       = 0
         person_number_missing        = 0
         internal_error               = 0
         database_error               = 0
         reference_missing            = 0
         OTHERS                       = 0.

    ENDIF.

    CLEAR me-&gt;t_outtab_iu_del[].

    LOOP AT me-&gt;t_outtab_iu ASSIGNING &lt;lfs_iu&gt;.

      IF &lt;lfs_iu&gt;-cellstyles[] IS INITIAL.

        IF ( NOT &lt;lfs_iu&gt;-objtype IS INITIAL ) AND ( NOT &lt;lfs_iu&gt;-objid IS INITIAL ).

          MOVE-CORRESPONDING &lt;lfs_iu&gt; TO ls_iu.

          INSERT ztbuswiu FROM ls_iu.

          IF sy-subrc = 0.

            ls_cellstyle-fieldname = &apos;OBJID&apos;.
            ls_cellstyle-style     = cl_gui_alv_grid=&gt;mc_style_disabled.

            APPEND ls_cellstyle TO lt_cellstyles.

            ls_cellstyle-fieldname = &apos;OBJTYPE&apos;.

            APPEND ls_cellstyle TO lt_cellstyles.

            &lt;lfs_iu&gt;-cellstyles[] = lt_cellstyles.

          ELSE.

            &quot; Duplicated entry &amp; &amp;
            MESSAGE e005(zrest) WITH ls_iu-objtype ls_iu-objid DISPLAY LIKE &apos;E&apos;.

            EXIT.

          ENDIF.

        ENDIF.

      ENDIF.

    ENDLOOP.

    &quot; Data saved ...
    MESSAGE s007(zrest).

    ls_stable-row = &apos;X&apos;.
    ls_stable-col = &apos;X&apos;.

    o_alv-&gt;refresh_table_display(
      EXPORTING
        is_stable      = ls_stable
      EXCEPTIONS
        finished       = 1
        OTHERS         = 2
    ).

    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

  ENDMETHOD.                    &quot;save_iu_changes

  METHOD maintain_address_iu.

    FIELD-SYMBOLS: &lt;lfs_iu&gt; LIKE LINE OF me-&gt;t_outtab_iu.

    &quot; Internal tables
    DATA: lt_index_rows  TYPE lvc_t_row,
          lt_row_no      TYPE lvc_t_roid,
          lt_handle      TYPE STANDARD TABLE OF addr1_dia,
          lt_tsadrv      TYPE STANDARD TABLE OF tsadrv,
          lt_addr1_data  TYPE STANDARD TABLE OF addr1_data.

    &quot; Structures
    DATA: ls_row_no   TYPE lvc_s_roid,
          ls_handle   TYPE addr1_dia,
          ls_tsadrv   TYPE tsadrv,
          ls_addr_ref TYPE addr_ref,
          ls_stable   TYPE lvc_s_stbl.

    &quot; Elementary
    DATA: l_lines   TYPE i,
          l_okcode  LIKE sy-ucomm.

    o_alv-&gt;get_selected_rows(
      IMPORTING
        et_index_rows = lt_index_rows
        et_row_no     = lt_row_no
    ).

    l_lines = LINES( lt_index_rows ).

    IF l_lines = 1.

      CLEAR: ls_tsadrv, ls_handle, lt_handle[], lt_addr1_data[], l_okcode.

      READ TABLE lt_row_no INTO ls_row_no INDEX 1.

      READ TABLE me-&gt;t_outtab_iu ASSIGNING &lt;lfs_iu&gt; INDEX ls_row_no-row_id.

      &quot; Means that the entry was not save yet...
      IF &lt;lfs_iu&gt;-cellstyles[] IS INITIAL.
        &quot; Address can be maintained only for already saved entries
        MESSAGE i002(zrest) DISPLAY LIKE &apos;W&apos;.
        EXIT.
      ENDIF.

      SELECT * FROM tsadrv INTO TABLE lt_tsadrv
        UP TO 1 ROWS
        WHERE tablename = &apos;ZTBUSWIU&apos;.

      IF sy-subrc = 0.

        READ TABLE lt_tsadrv INTO ls_tsadrv INDEX 1.

        ls_handle-addr_group = ls_tsadrv-addr_group.

      ENDIF.

      IF &lt;lfs_iu&gt;-addrnumber IS INITIAL.
        CONCATENATE sy-mandt &lt;lfs_iu&gt;-objtype &lt;lfs_iu&gt;-objid INTO ls_handle-handle RESPECTING BLANKS.
        ls_handle-maint_mode = &apos;CREATE&apos;.
      ELSE.
        ls_handle-addrnumber = &lt;lfs_iu&gt;-addrnumber.
        ls_handle-maint_mode = &apos;CHANGE&apos;.
      ENDIF.

      APPEND ls_handle TO lt_handle.

      CALL FUNCTION &apos;ADDR_DIALOG&apos;
        EXPORTING
          check_address             = &apos;X&apos;
          suppress_taxjurcode_check = &apos;X&apos;
        IMPORTING
          ok_code                   = l_okcode
        TABLES
          number_handle_tab         = lt_handle
          values                    = lt_addr1_data
        EXCEPTIONS
          address_not_exist         = 1
          group_not_valid           = 2
          parameter_error           = 3
          internal_error            = 4
          OTHERS                    = 5.

      IF sy-subrc &lt;&gt; 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
          WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.

      IF l_okcode &lt;&gt; &apos;CANC&apos;.

        IF ls_handle-maint_mode = &apos;CHANGE&apos;.

          CALL FUNCTION &apos;ADDR_SINGLE_SAVE&apos;
            EXPORTING
              address_number         = &lt;lfs_iu&gt;-addrnumber
            EXCEPTIONS
              address_not_exist      = 1
              person_not_exist       = 2
              address_number_missing = 3
              reference_missing      = 4
              internal_error         = 5
              database_error         = 6
              parameter_error        = 7
              OTHERS                 = 8.

          IF sy-subrc &lt;&gt; 0.
            MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
          ENDIF.

        ENDIF.

        IF ls_handle-maint_mode = &apos;CREATE&apos;.

          ls_addr_ref-appl_table = ls_tsadrv-tablename.
          ls_addr_ref-appl_field = ls_tsadrv-fieldname.
          ls_addr_ref-appl_key   = ls_handle-handle.
          ls_addr_ref-addr_group = ls_tsadrv-addr_group.
          ls_addr_ref-owner      = &apos;X&apos;.

          CALL FUNCTION &apos;ADDR_NUMBER_GET&apos;
            EXPORTING
              address_handle           = ls_handle-handle
              address_reference        = ls_addr_ref
            IMPORTING
              address_number           = ls_handle-addrnumber
            EXCEPTIONS
              address_handle_not_exist = 1
              internal_error           = 2
              parameter_error          = 3
              OTHERS                   = 4.

          IF sy-subrc &lt;&gt; 0.
            MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
          ENDIF.

          &lt;lfs_iu&gt;-addrnumber = ls_handle-addrnumber.

          CALL FUNCTION &apos;ADDR_SINGLE_SAVE&apos;
            EXPORTING
              address_number         = &lt;lfs_iu&gt;-addrnumber
            EXCEPTIONS
              address_not_exist      = 1
              person_not_exist       = 2
              address_number_missing = 3
              reference_missing      = 4
              internal_error         = 5
              database_error         = 6
              parameter_error        = 7
              OTHERS                 = 8.

          IF sy-subrc &lt;&gt; 0.
            MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
          ELSE.

            UPDATE ztbuswiu SET addrnumber = &lt;lfs_iu&gt;-addrnumber
              WHERE objtype = &lt;lfs_iu&gt;-objtype AND
                    objid   = &lt;lfs_iu&gt;-objid.

            IF sy-subrc = 0.
              &quot; Data saved ...
              MESSAGE s007(zrest).
            ENDIF.

            ls_stable-row = &apos;X&apos;.
            ls_stable-col = &apos;X&apos;.

            o_alv-&gt;refresh_table_display(
              EXPORTING
                is_stable      = ls_stable
              EXCEPTIONS
                finished       = 1
                OTHERS         = 2
            ).

            IF sy-subrc &lt;&gt; 0.
              MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
            ENDIF.

          ENDIF.

        ENDIF.

      ENDIF.

    ELSE.

      IF l_lines = 0.
        &quot; Please select one entry to maintain
        MESSAGE i003(zrest) DISPLAY LIKE &apos;W&apos;.
      ELSE.
        &quot; Please select only one entry to maintain
        MESSAGE i004(zrest) DISPLAY LIKE &apos;W&apos;.
      ENDIF.

    ENDIF.

  ENDMETHOD.                    &quot;maintain_address_iu

  METHOD maintain_password_du.

    FIELD-SYMBOLS: &lt;lfs_du&gt; LIKE LINE OF me-&gt;t_outtab_du.

    &quot; Internal tables
    DATA: lt_index_rows  TYPE lvc_t_row,
          lt_row_no      TYPE lvc_t_roid.

    &quot; Structures
    DATA: ls_row_no TYPE lvc_s_roid.

    &quot; Elementary
    DATA: l_lines             TYPE i,
          l_ssf_password      TYPE ssfinfo-password,
          l_sld_password      TYPE sld_password,
          l_encoded_password  TYPE sld_b64pwd.

    o_alv-&gt;get_selected_rows(
      IMPORTING
        et_index_rows = lt_index_rows
        et_row_no     = lt_row_no
    ).

    l_lines = LINES( lt_row_no ).

    IF l_lines &gt; 0.

      LOOP AT lt_row_no INTO ls_row_no.

        READ TABLE me-&gt;t_outtab_du ASSIGNING &lt;lfs_du&gt; INDEX ls_row_no-row_id.

        IF &lt;lfs_du&gt; IS ASSIGNED.

          CALL FUNCTION &apos;SSFH_PASSWORD_PROMPT&apos;
            EXPORTING
              signer           = &lt;lfs_du&gt;-bname
            IMPORTING
              password         = l_ssf_password
            EXCEPTIONS
              canceled_by_user = 1
              OTHERS           = 2.

          IF sy-subrc &lt;&gt; 0.
            MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
          ELSE.

            l_sld_password = l_ssf_password.

            CALL FUNCTION &apos;ENCODE_SLDPWD_BASE64&apos;
              EXPORTING
                password  = l_sld_password
              IMPORTING
                pwdbase64 = l_encoded_password.

            CLEAR: l_sld_password, l_ssf_password.

            &lt;lfs_du&gt;-password = l_encoded_password.

            UPDATE ztbuswdu SET password = &lt;lfs_du&gt;-password
              WHERE bname = &lt;lfs_du&gt;-bname.

            IF sy-subrc = 0.
              &quot; Data saved ...
              MESSAGE s007(zrest).
            ENDIF.

          ENDIF.

        ENDIF.

      ENDLOOP.

    ELSE.

      &quot; Please select one entry to maintain
      MESSAGE i003(zrest) DISPLAY LIKE &apos;W&apos;.
      EXIT.

    ENDIF.

  ENDMETHOD.                    &quot;maintain_password_du

  METHOD save_du_changes.

    FIELD-SYMBOLS: &lt;lfs_du&gt; LIKE LINE OF me-&gt;t_outtab_du.

    &quot; Internal tables
    DATA: lt_cellstyles TYPE lvc_t_styl.

    &quot; Structures
    DATA: ls_du        TYPE ztbuswdu,
          ls_cellstyle TYPE lvc_s_styl.

    LOOP AT me-&gt;t_outtab_du_del ASSIGNING &lt;lfs_du&gt;.

      DELETE FROM ztbuswdu WHERE bname = &lt;lfs_du&gt;-bname.

    ENDLOOP.

    CLEAR me-&gt;t_outtab_du_del[].

    LOOP AT me-&gt;t_outtab_du ASSIGNING &lt;lfs_du&gt;
      WHERE cellstyles IS INITIAL.

      ls_du-bname = &lt;lfs_du&gt;-bname.

      INSERT ztbuswdu FROM ls_du.

      IF sy-subrc = 0.

        ls_cellstyle-fieldname = &apos;BNAME&apos;.
        ls_cellstyle-style     = cl_gui_alv_grid=&gt;mc_style_disabled.

        APPEND ls_cellstyle TO lt_cellstyles.

        &lt;lfs_du&gt;-cellstyles[] = lt_cellstyles[].

      ELSE.
        &quot; Duplicated entry &amp;
        MESSAGE i006(zrest) WITH ls_du-bname DISPLAY LIKE &apos;E&apos;.
      ENDIF.

    ENDLOOP.

    &quot; Data saved ...
    MESSAGE s007(zrest).

  ENDMETHOD.                    &quot;save_du_changes

  METHOD save_ua_changes.

    FIELD-SYMBOLS: &lt;lfs_ua&gt; LIKE LINE OF me-&gt;t_outtab_ua.

    &quot; Internal tables
    DATA: lt_cellstyles TYPE lvc_t_styl.

    &quot; Structures
    DATA: ls_ua        TYPE ztbuswua,
          ls_cellstyle TYPE lvc_s_styl.

    &quot; Elementary
    DATA: l_abort TYPE abap_bool.

    LOOP AT me-&gt;t_outtab_ua_del ASSIGNING &lt;lfs_ua&gt;.

      DELETE FROM ztbuswua WHERE objtype = &lt;lfs_ua&gt;-objtype AND
                                 objid   = &lt;lfs_ua&gt;-objid AND
                                 bname   = &lt;lfs_ua&gt;-bname AND
                                 appid   = &lt;lfs_ua&gt;-appid.

    ENDLOOP.

    CLEAR me-&gt;t_outtab_ua_del[].

    LOOP AT me-&gt;t_outtab_ua ASSIGNING &lt;lfs_ua&gt;
      WHERE cellstyles IS INITIAL.

      CLEAR ls_ua.

      MOVE-CORRESPONDING &lt;lfs_ua&gt; TO ls_ua.

      INSERT ztbuswua FROM ls_ua.

      IF sy-subrc = 0.

        ls_cellstyle-fieldname = &apos;APPID&apos;.
        ls_cellstyle-style     = cl_gui_alv_grid=&gt;mc_style_disabled.

        APPEND ls_cellstyle TO lt_cellstyles.

        ls_cellstyle-fieldname = &apos;OBJID&apos;.

        APPEND ls_cellstyle TO lt_cellstyles.

        ls_cellstyle-fieldname = &apos;OBJTYPE&apos;.

        APPEND ls_cellstyle TO lt_cellstyles.

        &lt;lfs_ua&gt;-cellstyles[] = lt_cellstyles[].

      ELSE.

        &quot; Duplicated entry &amp;
        MESSAGE i006(zrest) WITH ls_ua-objtype ls_ua-objid ls_ua-bname ls_ua-appid
          DISPLAY LIKE &apos;E&apos;.

        l_abort = &apos;X&apos;.

        EXIT.

      ENDIF.

    ENDLOOP.

    CHECK l_abort IS INITIAL.

    LOOP AT me-&gt;t_outtab_ua ASSIGNING &lt;lfs_ua&gt;
      WHERE changed IS NOT INITIAL.

      UPDATE ztbuswua SET bname   = &lt;lfs_ua&gt;-bname
                          refuser = &lt;lfs_ua&gt;-refuser
                          pkey    = &lt;lfs_ua&gt;-pkey
                          aenam   = sy-uname
                          aedat   = sy-datum
        WHERE objtype = &lt;lfs_ua&gt;-objtype AND
              objid   = &lt;lfs_ua&gt;-objid AND
              appid   = &lt;lfs_ua&gt;-appid.

      IF sy-subrc = 0.
        &lt;lfs_ua&gt;-changed = &apos; &apos;.
      ENDIF.

    ENDLOOP.

  ENDMETHOD.                    &quot;save_ua_changes

  METHOD check_data_loss.

    DATA: l_answer   TYPE abap_bool,
          l_do_check TYPE abap_bool.

    IF NOT p_iu IS INITIAL.

      LOOP AT me-&gt;t_outtab_iu TRANSPORTING NO FIELDS
        WHERE cellstyles IS INITIAL.
        l_do_check = abap_true.
        EXIT.
      ENDLOOP.

      IF ( NOT me-&gt;t_outtab_iu_del[] IS INITIAL ) OR ( l_do_check = abap_true ).

        CALL FUNCTION &apos;POPUP_TO_CONFIRM_DATA_LOSS&apos;
          EXPORTING
            titel  = text-004
          IMPORTING
            answer = l_answer.

        IF l_answer = &apos;J&apos;.
          me-&gt;save_iu_changes( ).
        ENDIF.

        IF l_answer = &apos;A&apos;.
          r_cancel = abap_true.
        ENDIF.

      ENDIF.

    ENDIF.

    IF NOT p_du IS INITIAL.

      LOOP AT me-&gt;t_outtab_du TRANSPORTING NO FIELDS
        WHERE cellstyles IS INITIAL.
        l_do_check = abap_true.
        EXIT.
      ENDLOOP.

      IF ( NOT me-&gt;t_outtab_du_del[] IS INITIAL ) OR ( l_do_check = abap_true ).

        CALL FUNCTION &apos;POPUP_TO_CONFIRM_DATA_LOSS&apos;
          EXPORTING
            titel  = text-004
          IMPORTING
            answer = l_answer.

        IF l_answer = &apos;J&apos;.
          me-&gt;save_du_changes( ).
        ENDIF.

        IF l_answer = &apos;A&apos;.
          r_cancel = abap_true.
        ENDIF.

      ENDIF.

    ENDIF.

    IF NOT p_ua IS INITIAL.

      LOOP AT me-&gt;t_outtab_ua TRANSPORTING NO FIELDS
        WHERE cellstyles IS INITIAL.

        l_do_check = abap_true.

        EXIT.

      ENDLOOP.

      LOOP AT me-&gt;t_outtab_ua TRANSPORTING NO FIELDS
        WHERE changed IS NOT INITIAL.

        l_do_check = abap_true.

        EXIT.

      ENDLOOP.

      IF ( NOT me-&gt;t_outtab_ua_del[] IS INITIAL ) OR ( l_do_check = abap_true ).

        CALL FUNCTION &apos;POPUP_TO_CONFIRM_DATA_LOSS&apos;
          EXPORTING
            titel  = text-004
          IMPORTING
            answer = l_answer.

        IF l_answer = &apos;J&apos;.
          me-&gt;save_ua_changes( ).
        ENDIF.

        IF l_answer = &apos;A&apos;.
          r_cancel = abap_true.
        ENDIF.

      ENDIF.

    ENDIF.

  ENDMETHOD.                    &quot;check_data_loss

ENDCLASS.                    &quot;lcl_application IMPLEMENTATION</source>
 </PROG>
 <PROG NAME="ZRUSW00_DEF" VARCL="X" SUBC="I" LEVL="700" RMAND="200" RLOAD="P" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Local class definition" LENGTH="22 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  Include           ZRUSW00_DEF
*&amp;---------------------------------------------------------------------*

*---------------------------------------------------------------------*
*       CLASS lcl_application DEFINITION
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
CLASS lcl_application DEFINITION FINAL CREATE PRIVATE.

  PUBLIC SECTION.

    CLASS-METHODS: get_instance RETURNING value(r_ref) TYPE REF TO lcl_application.

    CLASS-DATA: ref    TYPE REF TO lcl_application,
                okcode LIKE sy-ucomm.

    &quot; Internal tables
    DATA: t_outtab_iu     TYPE STANDARD TABLE OF zstuswiu_alv,
          t_outtab_iu_del TYPE STANDARD TABLE OF zstuswiu_alv,
          t_outtab_du     TYPE STANDARD TABLE OF zstuswdu_alv,
          t_outtab_du_del TYPE STANDARD TABLE OF zstuswdu_alv,
          t_outtab_ua     TYPE STANDARD TABLE OF zstuswua_alv,
          t_outtab_ua_del TYPE STANDARD TABLE OF zstuswua_alv.

    METHODS: main,
*             initialization,
             selection_screen_output,
             status_9000,
             handle_exit_command,
             user_command_9000,
             alv_variant_f4 IMPORTING i_handle  TYPE disvariant-handle
                            CHANGING ch_variant TYPE disvariant-variant,
             handle_changed_finished FOR EVENT data_changed_finished OF cl_gui_alv_grid
                IMPORTING e_modified
                          et_good_cells,
             handle_data_changed     FOR EVENT data_changed OF cl_gui_alv_grid
                IMPORTING er_data_changed
                          e_ucomm.

  PRIVATE SECTION.

    METHODS: select_data,
             init_gui_components,
             change_fieldcat,
             maintain_address_iu,
             maintain_password_du,
             save_iu_changes,
             save_du_changes,
             save_ua_changes,
             check_data_loss RETURNING value(r_cancel) TYPE abap_bool,
             get_du_data IMPORTING i_bname TYPE xubname
                         CHANGING ch_du LIKE LINE OF t_outtab_du.

ENDCLASS.                    &quot;lcl_application DEFINITION</source>
 </PROG>
 <PROG NAME="ZRUSW00_TOP" VARCL="X" SUBC="I" LEVL="700" RMAND="200" RLOAD="P" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Include TOP" LENGTH="11 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  Include           ZRUSW00_TOP
*&amp;---------------------------------------------------------------------*

CLASS lcl_application DEFINITION DEFERRED.

TABLES: ztbuswiu, ztbuswdu, ztbuswua, disvariant.

DATA: o_app TYPE REF TO lcl_application,
      o_cc  TYPE REF TO cl_gui_custom_container,
      o_alv TYPE REF TO cl_gui_alv_grid.

***********************************************************************
* SELECTION-SCREEN                                                    *
***********************************************************************

&quot; Selection criteria for internet users maintenance
SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-001.
SELECT-OPTIONS s_objtp FOR ztbuswiu-objtype MODIF ID iu.
SELECT-OPTIONS s_objid FOR ztbuswiu-objid MODIF ID iu.
SELECTION-SCREEN END OF BLOCK b1.

&quot; Selection criteria for dialog users maintenance
SELECTION-SCREEN BEGIN OF BLOCK b2 WITH FRAME TITLE text-001.
SELECT-OPTIONS s_bname FOR ztbuswdu-bname MODIF ID du.
SELECTION-SCREEN END OF BLOCK b2.

&quot; Selection criteria for dialog users maintenance
SELECTION-SCREEN BEGIN OF BLOCK b3 WITH FRAME TITLE text-001.
SELECT-OPTIONS s_objtp2 FOR ztbuswua-objtype MODIF ID ua.
SELECT-OPTIONS s_objid2 FOR ztbuswua-objid MODIF ID ua.
SELECT-OPTIONS s_bname2 FOR ztbuswua-bname MODIF ID ua.
SELECT-OPTIONS s_appid  FOR ztbuswua-appid MODIF ID ua.
SELECTION-SCREEN END OF BLOCK b3.

&quot; Options
SELECTION-SCREEN BEGIN OF BLOCK b4 WITH FRAME TITLE text-002.
PARAMETERS: p_iu TYPE c RADIOBUTTON GROUP g1 USER-COMMAND opt MODIF ID opt DEFAULT &apos;X&apos;.
PARAMETERS: p_du TYPE c RADIOBUTTON GROUP g1 MODIF ID opt.
PARAMETERS: p_ua TYPE c RADIOBUTTON GROUP g1 MODIF ID opt.
SELECTION-SCREEN END OF BLOCK b4.

&quot; ALV layout
SELECTION-SCREEN BEGIN OF BLOCK b5 WITH FRAME TITLE text-003.
PARAMETERS: p_vrnt1 TYPE disvariant-variant.
PARAMETERS: p_vrnt2 TYPE disvariant-variant.
PARAMETERS: p_vrnt3 TYPE disvariant-variant.
SELECTION-SCREEN END OF BLOCK b5.</source>
 </PROG>
 <PROG NAME="ZRUSW00" VARCL="X" SUBC="1" RMAND="200" RLOAD="E" FIXPT="X" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="I" KEY="001" ENTRY="Selection criteria" LENGTH="18 "/>
    <textElement ID="I" KEY="002" ENTRY="Options" LENGTH="7 "/>
    <textElement ID="I" KEY="003" ENTRY="ALV Layout" LENGTH="10 "/>
    <textElement ID="I" KEY="004" ENTRY="REST API - Users setup" LENGTH="30 "/>
    <textElement ID="I" KEY="005" ENTRY="Address can be maintained only for already saved entries" LENGTH="56 "/>
    <textElement ID="R" ENTRY="REST API - Users setup" LENGTH="22 "/>
    <textElement ID="S" KEY="P_DU" ENTRY="        Dialog users maintenance" LENGTH="32 "/>
    <textElement ID="S" KEY="P_IU" ENTRY="        Internet users maintenance" LENGTH="34 "/>
    <textElement ID="S" KEY="P_UA" ENTRY="        User assignment maintenance" LENGTH="35 "/>
    <textElement ID="S" KEY="P_VRNT1" ENTRY="        Internet user display layout" LENGTH="36 "/>
    <textElement ID="S" KEY="P_VRNT2" ENTRY="        Dialog users display layout" LENGTH="35 "/>
    <textElement ID="S" KEY="P_VRNT3" ENTRY="        User assignment display layout" LENGTH="38 "/>
    <textElement ID="S" KEY="S_APPID" ENTRY="        Application ID" LENGTH="22 "/>
    <textElement ID="S" KEY="S_BNAME" ENTRY="        Dialog user" LENGTH="19 "/>
    <textElement ID="S" KEY="S_BNAME2" ENTRY="        Dialog user" LENGTH="19 "/>
    <textElement ID="S" KEY="S_OBJID" ENTRY="        Internet user id" LENGTH="24 "/>
    <textElement ID="S" KEY="S_OBJID2" ENTRY="        Internet user id" LENGTH="24 "/>
    <textElement ID="S" KEY="S_OBJTP" ENTRY="        Internet user object type" LENGTH="33 "/>
    <textElement ID="S" KEY="S_OBJTP2" ENTRY="        Internet user object type" LENGTH="33 "/>
   </language>
  </textPool>
  <dynpros>
   <dynpro PROG="ZRUSW00" DNUM="9000" FNUM="9000" BZMX="200 " BZBR="240 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="200 " NOCO="240 " VALP="0 " CUAN="G" SPRA="E" DTEXT="">
    <dynprofield FNAM="CC" DIDX="00C8" FLG1="00" FLG2="30" FLG3="00" FILL="U" FMB1="30" FMB2="00" LENG="F0" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" AUTH="102" AGLT="05" ADEZ="05"/>
    <dynprofield FNAM="LCL_APPLICATION=&gt;OKCODE" DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.

  MODULE status_9000.

PROCESS AFTER INPUT.

  MODULE exit AT EXIT-COMMAND.

  MODULE user_command_9000.</dynproflowsource>
   </dynpro>
  </dynpros>
  <pfstatus>
   <pfstatus_sta CODE="PF9000" MODAL="D" ACTCODE="000001" PFKCODE="000001" BUTCODE="0001" INT_NOTE="Menu Screen 9000"/>
   <pfstatus_fun CODE="ADD" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_INSERT_ROW" ICON_ID="@17@" FUN_TEXT="Adicionar"/>
   <pfstatus_fun CODE="ADDR" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_ADDRESS" ICON_ID="@0T@" FUN_TEXT="Address"/>
   <pfstatus_fun CODE="BACK" TEXTNO="001" TYPE="E" TEXT_TYPE="S" FUN_TEXT="Voltar"/>
   <pfstatus_fun CODE="CANCEL" TEXTNO="001" TYPE="E" TEXT_TYPE="S" TEXT_NAME="ICON_CANCEL" ICON_ID="@0W@" FUN_TEXT="Cancelar"/>
   <pfstatus_fun CODE="CHANGE" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_CHANGE" ICON_ID="@0Z@" FUN_TEXT="Modificar"/>
   <pfstatus_fun CODE="DELETE" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_DELETE" ICON_ID="@11@" FUN_TEXT="Apagar"/>
   <pfstatus_fun CODE="EXIT" TEXTNO="001" TYPE="E" TEXT_TYPE="S" FUN_TEXT="Encerrar"/>
   <pfstatus_fun CODE="NEW" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_CREATE" ICON_ID="@0Y@" FUN_TEXT="Novo"/>
   <pfstatus_fun CODE="PASS" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_CHANGE_PASSWORD" ICON_ID="@I9@" FUN_TEXT="Password"/>
   <pfstatus_fun CODE="SAVE" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SYSTEM_SAVE" ICON_ID="@2L@" FUN_TEXT="Gravar"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="01" PFNO="13"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="02" PFNO="14"/>
   <pfstatus_pfk CODE="000001" PFNO="03" FUNCODE="BACK" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="11" FUNCODE="SAVE" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="12" FUNCODE="CANCEL" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="13" FUNCODE="ADDR" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="14" FUNCODE="PASS" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="15" FUNCODE="EXIT" FUNNO="001"/>
   <pfstatus_set STATUS="PF9000" FUNCTION="ADDR"/>
   <pfstatus_set STATUS="PF9000" FUNCTION="BACK"/>
   <pfstatus_set STATUS="PF9000" FUNCTION="CANCEL"/>
   <pfstatus_set STATUS="PF9000" FUNCTION="EXIT"/>
   <pfstatus_set STATUS="PF9000" FUNCTION="PASS"/>
   <pfstatus_set STATUS="PF9000" FUNCTION="SAVE"/>
   <pfstatus_doc OBJ_TYPE="A" OBJ_CODE="000001" MODAL="D" INT_NOTE="Menu Screen 9000"/>
   <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="000001" MODAL="D" INT_NOTE="Menu Screen 9000"/>
   <pfstatus_doc OBJ_TYPE="B" OBJ_CODE="000001" SUB_CODE="0001" MODAL="D" INT_NOTE="Menu Screen 9000"/>
   <pfstatus_tit CODE="TB9000" TEXT="&amp;1"/>
  </pfstatus>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  ZRUSW00
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;
*&amp;---------------------------------------------------------------------*

REPORT  zrusw00.

INCLUDE: zrusw00_top, &quot; Include TOP
         zrusw00_def, &quot; Local class definition
         zrusw00_imp, &quot; Local class implementation
         zrusw00_pbo, &quot; PBO modules
         zrusw00_pai. &quot; PAI modules

***********************************************************************
* INITIALIZATION                                                      *
***********************************************************************
INITIALIZATION.

  o_app = lcl_application=&gt;get_instance( ).

*  o_app-&gt;initialization( ).

************************************************************************
* AT SELECTION-SCREEN OUTPUT.
************************************************************************
AT SELECTION-SCREEN OUTPUT.

  o_app-&gt;selection_screen_output( ).

************************************************************************
* AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_vrnt1.
************************************************************************
AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_vrnt1.

  o_app-&gt;alv_variant_f4(
    EXPORTING
      i_handle = &apos;IU&apos;
    CHANGING
      ch_variant = p_vrnt1
  ).

************************************************************************
* AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_vrnt2.
************************************************************************
AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_vrnt2.

  o_app-&gt;alv_variant_f4(
    EXPORTING
      i_handle = &apos;DU&apos;
    CHANGING
      ch_variant = p_vrnt2
  ).

************************************************************************
* AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_vrnt3.
************************************************************************
AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_vrnt3.

  o_app-&gt;alv_variant_f4(
    EXPORTING
      i_handle = &apos;UA&apos;
    CHANGING
      ch_variant = p_vrnt3
  ).

***********************************************************************
* START-OF-SELECTION                                                  *
***********************************************************************
START-OF-SELECTION.

  o_app-&gt;main( ).</source>
 </PROG>
 <TABL TABNAME="ZTBUSWUA" DDLANGUAGE="E" TABCLASS="TRANSP" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" CLIDEP="X" DDTEXT="User Switch - User Assignment" AUTHCLASS="00" MAINFLAG="X" CONTFLAG="A" PROZPUFF="000" EXCLASS="1">
  <dd09l TABNAME="ZTBUSWUA" AS4LOCAL="A" AS4VERS="0000" TABKAT="0" TABART="APPL1" PUFFERUNG="X" SCHFELDANZ="000" PROTOKOLL="X" BUFALLOW="X"/>
  <dd03p TABNAME="ZTBUSWUA" FIELDNAME="MANDT" DDLANGUAGE="E" POSITION="0001" KEYFLAG="X" ROLLNAME="MANDT" ADMINFIELD="0" INTTYPE="C" INTLEN="000006" NOTNULL="X" DOMNAME="MANDT" ROUTPUTLEN="000000" HEADLEN="03" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CLNT" LENG="000003" OUTPUTLEN="000003" DECIMALS="000000" ENTITYTAB="T000" MASK="  CLNTE" MASKLEN="0000" DDTEXT="Client" REPTEXT="Cl." SCRTEXT_S="Client" SCRTEXT_M="Client" SCRTEXT_L="Client" DOMNAME3L="MANDT" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZTBUSWUA" FIELDNAME="OBJTYPE" DDLANGUAGE="E" POSITION="0002" KEYFLAG="X" ROLLNAME="OJ_NAME" CHECKTABLE="TOJTB" ADMINFIELD="0" INTTYPE="C" INTLEN="000020" NOTNULL="X" DOMNAME="OJ_NAME" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000010" OUTPUTLEN="000010" DECIMALS="000000" ENTITYTAB="TOJTB" MASK="  CHARE" MASKLEN="0000" DDTEXT="Object type" REPTEXT="Obj. type" SCRTEXT_S="Obj.type" SCRTEXT_M="Object type" SCRTEXT_L="Object type" DOMMASTER="D" DOMNAME3L="OJ_NAME" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZTBUSWUA" FIELDNAME="OBJID" DDLANGUAGE="E" POSITION="0003" KEYFLAG="X" ROLLNAME="WWWOBJID" CHECKTABLE="ZTBUSWIU" ADMINFIELD="0" INTTYPE="C" INTLEN="000032" NOTNULL="X" DOMNAME="WWWOBJID" ROUTPUTLEN="000000" MEMORYID="UID" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000016" OUTPUTLEN="000016" DECIMALS="000000" ENTITYTAB="BAPIUSW01" CONVEXIT="ALPHA" MASK="  CHARE" MASKLEN="0000" DDTEXT="User ID in Internet user master" REPTEXT="User ID" SCRTEXT_S="User ID" SCRTEXT_M="User ID" SCRTEXT_L="Internet user ID" DOMMASTER="D" DOMNAME3L="WWWOBJID" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZTBUSWUA" FIELDNAME="APPID" DDLANGUAGE="E" POSITION="0004" KEYFLAG="X" ROLLNAME="ZDE_RESTAPI_APP_ID" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" NOTNULL="X" ROUTPUTLEN="000000" HEADLEN="23" SCRLEN1="10" SCRLEN2="15" SCRLEN3="23" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="REST API Application ID" REPTEXT="REST API Application ID" SCRTEXT_S="App ID" SCRTEXT_M="REST API App ID" SCRTEXT_L="REST API Application ID" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZTBUSWUA" FIELDNAME="BNAME" DDLANGUAGE="E" POSITION="0005" ROLLNAME="XUBNAME" CHECKTABLE="ZTBUSWDU" ADMINFIELD="0" INTTYPE="C" INTLEN="000024" DOMNAME="XUBNAME" ROUTPUTLEN="000000" MEMORYID="XUS" HEADLEN="12" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000012" OUTPUTLEN="000012" DECIMALS="000000" ENTITYTAB="USR02" MASK="  CHARE" MASKLEN="0000" DDTEXT="User Name in User Master Record" REPTEXT="User Name" SCRTEXT_S="User" SCRTEXT_M="User" SCRTEXT_L="User" DOMMASTER="D" DOMNAME3L="XUBNAME" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZTBUSWUA" FIELDNAME="REFUSER" DDLANGUAGE="E" POSITION="0006" ROLLNAME="ZDE_RESTAPI_REFUSRONLY" ADMINFIELD="0" INTTYPE="C" INTLEN="000002" DOMNAME="ZDO_RESTAPI_REFUSRONLY" ROUTPUTLEN="000000" HEADLEN="14" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="CHAR" LENG="000001" OUTPUTLEN="000001" DECIMALS="000000" VALEXI="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="REST API  - Flag ref. user only" REPTEXT="Ref. User Only" SCRTEXT_S="Ref. User" SCRTEXT_M="Ref. User Only" SCRTEXT_L="Reference User Only" DOMNAME3L="ZDO_RESTAPI_REFUSRONLY" SHLPORIGIN="F" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZTBUSWUA" FIELDNAME="PKEY" DDLANGUAGE="E" POSITION="0007" ROLLNAME="ZDE_RESTAPI_PRIVATE_KEY" ADMINFIELD="0" INTTYPE="C" INTLEN="000064" ROUTPUTLEN="000000" HEADLEN="32" SCRLEN1="10" SCRLEN2="15" SCRLEN3="25" DTELMASTER="E" DATATYPE="CHAR" LENG="000032" OUTPUTLEN="000032" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Internet User Private Key - Authentication by token" REPTEXT="Private Key" SCRTEXT_S="Priv.Key" SCRTEXT_M="Private Key" SCRTEXT_L="Internet User Private Key" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZTBUSWUA" FIELDNAME="AENAM" DDLANGUAGE="E" POSITION="0008" ROLLNAME="AENAM" ADMINFIELD="0" INTTYPE="C" INTLEN="000024" DOMNAME="USNAM" ROUTPUTLEN="000000" HEADLEN="12" SCRLEN1="06" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000012" OUTPUTLEN="000012" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Name of Person Who Changed Object" REPTEXT="Changed by" SCRTEXT_S="By" SCRTEXT_M="Changed by" SCRTEXT_L="Changed by" DOMNAME3L="USNAM" DEPTH="00" COMPTYPE="E" DEFFDNAME="CHANGED_BY" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZTBUSWUA" FIELDNAME="AEDAT" DDLANGUAGE="E" POSITION="0009" ROLLNAME="AEDAT" ADMINFIELD="0" INTTYPE="D" INTLEN="000016" DOMNAME="DATUM" ROUTPUTLEN="000000" HEADLEN="08" SCRLEN1="05" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="DATS" LENG="000008" OUTPUTLEN="000010" DECIMALS="000000" MASK="  DATSE" MASKLEN="0000" DDTEXT="Changed On" REPTEXT="Chngd on" SCRTEXT_S="Chngd" SCRTEXT_M="Changed on" SCRTEXT_L="Changed on" DOMNAME3L="DATUM" SHLPORIGIN="T" DEPTH="00" COMPTYPE="E" DEFFDNAME="CH_ON" EXCLASS="0" DBPOSITION="0000"/>
  <dd05m TABNAME="ZTBUSWUA" FIELDNAME="BNAME" FORTABLE="ZTBUSWUA" FORKEY="MANDT" CHECKTABLE="ZTBUSWDU" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZTBUSWUA" FIELDNAME="BNAME" FORTABLE="ZTBUSWUA" FORKEY="BNAME" CHECKTABLE="ZTBUSWDU" CHECKFIELD="BNAME" PRIMPOS="0002" DOMNAME="XUBNAME" DATATYPE="CHAR" LENG="000012"/>
  <dd05m TABNAME="ZTBUSWUA" FIELDNAME="OBJID" FORTABLE="ZTBUSWUA" FORKEY="MANDT" CHECKTABLE="ZTBUSWIU" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZTBUSWUA" FIELDNAME="OBJID" FORTABLE="ZTBUSWUA" FORKEY="OBJTYPE" CHECKTABLE="ZTBUSWIU" CHECKFIELD="OBJTYPE" PRIMPOS="0002" DOMNAME="OJ_NAME" DATATYPE="CHAR" LENG="000010"/>
  <dd05m TABNAME="ZTBUSWUA" FIELDNAME="OBJID" FORTABLE="ZTBUSWUA" FORKEY="OBJID" CHECKTABLE="ZTBUSWIU" CHECKFIELD="OBJID" PRIMPOS="0003" DOMNAME="WWWOBJID" DATATYPE="CHAR" LENG="000016"/>
  <dd05m TABNAME="ZTBUSWUA" FIELDNAME="OBJTYPE" FORTABLE="ZTBUSWUA" FORKEY="OBJTYPE" CHECKTABLE="TOJTB" CHECKFIELD="NAME" PRIMPOS="0001" DOMNAME="OJ_NAME" DATATYPE="CHAR" LENG="000010"/>
  <dd08v TABNAME="ZTBUSWUA" FIELDNAME="BNAME" CHECKTABLE="ZTBUSWDU"/>
  <dd08v TABNAME="ZTBUSWUA" FIELDNAME="OBJID" CHECKTABLE="ZTBUSWIU"/>
  <dd08v TABNAME="ZTBUSWUA" FIELDNAME="OBJTYPE" CHECKTABLE="TOJTB"/>
 </TABL>
 <TABL TABNAME="ZTBUSWPR" DDLANGUAGE="E" TABCLASS="TRANSP" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" CLIDEP="X" DDTEXT="Internet User - Password Reset" AUTHCLASS="00" CONTFLAG="A" PROZPUFF="000" EXCLASS="1">
  <dd09l TABNAME="ZTBUSWPR" AS4LOCAL="A" AS4VERS="0000" TABKAT="1" TABART="APPL1" SCHFELDANZ="000" BUFALLOW="N"/>
  <dd03p TABNAME="ZTBUSWPR" FIELDNAME="MANDT" DDLANGUAGE="E" POSITION="0001" KEYFLAG="X" ROLLNAME="MANDT" ADMINFIELD="0" INTTYPE="C" INTLEN="000006" NOTNULL="X" DOMNAME="MANDT" ROUTPUTLEN="000000" HEADLEN="03" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CLNT" LENG="000003" OUTPUTLEN="000003" DECIMALS="000000" ENTITYTAB="T000" MASK="  CLNTE" MASKLEN="0000" DDTEXT="Client" REPTEXT="Cl." SCRTEXT_S="Client" SCRTEXT_M="Client" SCRTEXT_L="Client" DOMNAME3L="MANDT" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZTBUSWPR" FIELDNAME="OBJTYPE" DDLANGUAGE="E" POSITION="0002" KEYFLAG="X" ROLLNAME="OJ_NAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000020" NOTNULL="X" DOMNAME="OJ_NAME" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000010" OUTPUTLEN="000010" DECIMALS="000000" ENTITYTAB="TOJTB" MASK="  CHARE" MASKLEN="0000" DDTEXT="Object type" REPTEXT="Obj. type" SCRTEXT_S="Obj.type" SCRTEXT_M="Object type" SCRTEXT_L="Object type" DOMMASTER="D" DOMNAME3L="OJ_NAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZTBUSWPR" FIELDNAME="OBJID" DDLANGUAGE="E" POSITION="0003" KEYFLAG="X" ROLLNAME="WWWOBJID" ADMINFIELD="0" INTTYPE="C" INTLEN="000032" NOTNULL="X" DOMNAME="WWWOBJID" ROUTPUTLEN="000000" MEMORYID="UID" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000016" OUTPUTLEN="000016" DECIMALS="000000" ENTITYTAB="BAPIUSW01" CONVEXIT="ALPHA" MASK="  CHARE" MASKLEN="0000" DDTEXT="User ID in Internet user master" REPTEXT="User ID" SCRTEXT_S="User ID" SCRTEXT_M="User ID" SCRTEXT_L="Internet user ID" DOMMASTER="D" DOMNAME3L="WWWOBJID" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZTBUSWPR" FIELDNAME="UUID" DDLANGUAGE="E" POSITION="0004" KEYFLAG="X" ROLLNAME="UUID" ADMINFIELD="0" INTTYPE="X" INTLEN="000016" NOTNULL="X" DOMNAME="UUID" ROUTPUTLEN="000000" HEADLEN="32" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="RAW" LENG="000016" OUTPUTLEN="000032" DECIMALS="000000" MASK="  RAW E" MASKLEN="0000" DDTEXT="Global Unique ID for table" REPTEXT="Unique universal identifier" SCRTEXT_S="UUID" SCRTEXT_M="UUID" SCRTEXT_L="UUID" DOMNAME3L="UUID" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZTBUSWPR" FIELDNAME="ERDAT" DDLANGUAGE="E" POSITION="0005" ROLLNAME="ERDAT" ADMINFIELD="0" INTTYPE="D" INTLEN="000016" DOMNAME="DATUM" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="05" SCRLEN2="13" SCRLEN3="20" DTELMASTER="D" DATATYPE="DATS" LENG="000008" OUTPUTLEN="000010" DECIMALS="000000" MASK="  DATSE" MASKLEN="0000" DDTEXT="Date on Which Record Was Created" REPTEXT="Created on" SCRTEXT_S="On" SCRTEXT_M="Created on" SCRTEXT_L="Created on" DOMNAME3L="DATUM" SHLPORIGIN="T" DEPTH="00" COMPTYPE="E" DEFFDNAME="CR_ON" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZTBUSWPR" FIELDNAME="ERZET" DDLANGUAGE="E" POSITION="0006" ROLLNAME="ERZET" ADMINFIELD="0" INTTYPE="T" INTLEN="000012" DOMNAME="UZEIT" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="TIMS" LENG="000006" OUTPUTLEN="000008" DECIMALS="000000" MASK="  TIMSE" MASKLEN="0000" DDTEXT="Entry time" REPTEXT="Time" SCRTEXT_S="Time" SCRTEXT_M="Time" SCRTEXT_L="Time" DOMNAME3L="UZEIT" SHLPORIGIN="T" DEPTH="00" COMPTYPE="E" DEFFDNAME="REC_TIME" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZTBUSWPR" FIELDNAME="LOEKZ" DDLANGUAGE="E" POSITION="0007" ROLLNAME="LOEKZ" ADMINFIELD="0" INTTYPE="C" INTLEN="000002" DOMNAME="XFELD" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="02" SCRLEN1="09" SCRLEN2="17" SCRLEN3="18" DTELMASTER="D" DATATYPE="CHAR" LENG="000001" OUTPUTLEN="000001" DECIMALS="000000" VALEXI="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Asset class marked for deletion" REPTEXT="DI" SCRTEXT_S="Del. ind." SCRTEXT_M="Deletion Indic." SCRTEXT_L="Deletion indicator" DOMNAME3L="XFELD" SHLPORIGIN="F" DEPTH="00" COMPTYPE="E" DEFFDNAME="DELETE_IND" EXCLASS="0" DBPOSITION="0000"/>
 </TABL>
 <TABL TABNAME="ZST_ALV_ZRUSW01" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="Estrutura p/ ALV report ZRSU05_POFFSHORE" AUTHCLASS="00" PROZPUFF="000" EXCLASS="1">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZST_ALV_ZRUSW01" FIELDNAME="OBJTYPE" DDLANGUAGE="E" POSITION="0001" ROLLNAME="OJ_NAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000020" DOMNAME="OJ_NAME" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000010" OUTPUTLEN="000010" DECIMALS="000000" ENTITYTAB="TOJTB" MASK="  CHARE" MASKLEN="0000" DDTEXT="Object type" REPTEXT="Obj. type" SCRTEXT_S="Obj.type" SCRTEXT_M="Object type" SCRTEXT_L="Object type" DOMMASTER="D" DOMNAME3L="OJ_NAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZST_ALV_ZRUSW01" FIELDNAME="OBJID" DDLANGUAGE="E" POSITION="0002" ROLLNAME="WWWOBJID" ADMINFIELD="0" INTTYPE="C" INTLEN="000032" DOMNAME="WWWOBJID" ROUTPUTLEN="000000" MEMORYID="UID" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000016" OUTPUTLEN="000016" DECIMALS="000000" ENTITYTAB="BAPIUSW01" CONVEXIT="ALPHA" MASK="  CHARE" MASKLEN="0000" DDTEXT="User ID in Internet user master" REPTEXT="User ID" SCRTEXT_S="User ID" SCRTEXT_M="User ID" SCRTEXT_L="Internet user ID" DOMMASTER="D" DOMNAME3L="WWWOBJID" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZST_ALV_ZRUSW01" FIELDNAME="ADDRNUMBER" DDLANGUAGE="E" POSITION="0003" ROLLNAME="AD_ADDRNUM" ADMINFIELD="0" INTTYPE="C" INTLEN="000020" DOMNAME="AD_ADDRNUM" ROUTPUTLEN="000000" MEMORYID="ADR" LOGFLAG="X" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000010" OUTPUTLEN="000010" DECIMALS="000000" ENTITYTAB="ADRC" CONVEXIT="ALPHA" MASK="  CHARE" MASKLEN="0000" DDTEXT="Address number" REPTEXT="Addr. no." SCRTEXT_S="Addr. no." SCRTEXT_M="Address number" SCRTEXT_L="Address number" DOMNAME3L="AD_ADDRNUM" DEPTH="00" COMPTYPE="E" DEFFDNAME="ADDR_NO" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZST_ALV_ZRUSW01" FIELDNAME="ADDR_GROUP" DDLANGUAGE="E" POSITION="0004" ROLLNAME="AD_GROUP" ADMINFIELD="0" INTTYPE="C" INTLEN="000008" DOMNAME="AD_GROUP" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000004" OUTPUTLEN="000004" DECIMALS="000000" ENTITYTAB="TSAD7" MASK="  CHARE" MASKLEN="0000" DDTEXT="Address Group (Key) (Business Address Services)" REPTEXT="Key" SCRTEXT_S="Addr. grp." SCRTEXT_M="Address group" SCRTEXT_L="Address group" DOMNAME3L="AD_GROUP" DEPTH="00" COMPTYPE="E" DEFFDNAME="ADDR_GROUP" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZST_ALV_ZRUSW01" FIELDNAME="SMTP_ADDR" DDLANGUAGE="E" POSITION="0005" ROLLNAME="AD_SMTPADR" ADMINFIELD="0" INTTYPE="C" INTLEN="000482" DOMNAME="AD_SMTPADR" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="55" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000241" OUTPUTLEN="000241" DECIMALS="000000" LOWERCASE="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="E-Mail Address" REPTEXT="E-Mail Address" SCRTEXT_S="E-Mail" SCRTEXT_M="E-Mail Address" SCRTEXT_L="E-Mail Address" DOMMASTER="D" DOMNAME3L="AD_SMTPADR" DEPTH="00" COMPTYPE="E" DEFFDNAME="E_MAIL" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZST_ALV_ZRUSW01" FIELDNAME="NAME" DDLANGUAGE="E" POSITION="0006" ROLLNAME="AD_NAME1" ADMINFIELD="0" INTTYPE="C" INTLEN="000080" DOMNAME="TEXT40" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="40" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000040" OUTPUTLEN="000040" DECIMALS="000000" LOWERCASE="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Name 1" REPTEXT="Name" SCRTEXT_S="Name" SCRTEXT_M="Name" SCRTEXT_L="Name" DOMNAME3L="TEXT40" DEPTH="00" COMPTYPE="E" DEFFDNAME="NAME" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZST_ALV_ZRUSW01" FIELDNAME="CPF" DDLANGUAGE="E" POSITION="0007" ROLLNAME="ZPBR_CPFNR" ADMINFIELD="0" INTTYPE="C" INTLEN="000030" ROUTPUTLEN="000000" HEADLEN="45" SCRLEN1="10" SCRLEN2="15" SCRLEN3="25" DTELMASTER="E" DATATYPE="CHAR" LENG="000015" OUTPUTLEN="000015" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Sole Proprietor&apos;s Registry number (CPF)" REPTEXT="Sole Proprietor&apos;s Registry number (CPF)" SCRTEXT_S="CPF number" SCRTEXT_M="CPF number" SCRTEXT_L="CPF number" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZST_ALV_ZRUSW01" FIELDNAME="KOSTL" DDLANGUAGE="E" POSITION="0008" ROLLNAME="KOSTL" ADMINFIELD="0" INTTYPE="C" INTLEN="000020" DOMNAME="KOSTL" ROUTPUTLEN="000000" MEMORYID="KOS" LOGFLAG="X" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000010" OUTPUTLEN="000010" DECIMALS="000000" ENTITYTAB="CSKS" CONVEXIT="ALPHA" MASK="  CHARE" MASKLEN="0000" DDTEXT="Cost Center" REPTEXT="Cost Ctr" SCRTEXT_S="Cost Ctr" SCRTEXT_M="Cost Center" SCRTEXT_L="Cost Center" DOMNAME3L="KOSTL" DEPTH="00" COMPTYPE="E" DEFFDNAME="COSTCENTER" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZST_ALV_ZRUSW01" FIELDNAME="UIDDATE" DDLANGUAGE="E" POSITION="0009" ROLLNAME="XUERDAT" ADMINFIELD="0" INTTYPE="D" INTLEN="000016" DOMNAME="DATUM" ROUTPUTLEN="000000" HEADLEN="30" SCRLEN1="10" SCRLEN2="15" SCRLEN3="30" DTELMASTER="D" DATATYPE="DATS" LENG="000008" OUTPUTLEN="000010" DECIMALS="000000" MASK="  DATSE" MASKLEN="0000" DDTEXT="Creation Date of the User Master Record" REPTEXT="Creation Date of User Master" SCRTEXT_S="Creat.Date" SCRTEXT_M="Created On" SCRTEXT_L="Creation Date of User Master" DOMNAME3L="DATUM" SHLPORIGIN="T" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZST_ALV_ZRUSW01" FIELDNAME="LDATE" DDLANGUAGE="E" POSITION="0010" ROLLNAME="XULDATE" ADMINFIELD="0" INTTYPE="D" INTLEN="000016" DOMNAME="DATUM" ROUTPUTLEN="000000" HEADLEN="30" SCRLEN1="10" SCRLEN2="20" SCRLEN3="30" DTELMASTER="D" DATATYPE="DATS" LENG="000008" OUTPUTLEN="000010" DECIMALS="000000" MASK="  DATSE" MASKLEN="0000" DDTEXT="Last Logon Date" REPTEXT="Last Logon Date" SCRTEXT_S="Logon" SCRTEXT_M="Last Logon Date" SCRTEXT_L="Last Logon Date" DOMNAME3L="DATUM" SHLPORIGIN="T" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZST_ALV_ZRUSW01" FIELDNAME="LTIME" DDLANGUAGE="E" POSITION="0011" ROLLNAME="XULTIME" ADMINFIELD="0" INTTYPE="T" INTLEN="000012" DOMNAME="UZEIT" ROUTPUTLEN="000000" HEADLEN="21" SCRLEN1="10" SCRLEN2="20" SCRLEN3="21" DTELMASTER="D" DATATYPE="TIMS" LENG="000006" OUTPUTLEN="000008" DECIMALS="000000" MASK="  TIMSE" MASKLEN="0000" DDTEXT="Last Logon Time" REPTEXT="Last Logon Time" SCRTEXT_S="Logon" SCRTEXT_M="Last Logon Time" SCRTEXT_L="Last Logon Time" DOMNAME3L="UZEIT" SHLPORIGIN="T" DEPTH="00" COMPTYPE="E" DEFFDNAME="LAST LOGIN DATE" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZST_ALV_ZRUSW01" FIELDNAME="STATUS" DDLANGUAGE="E" POSITION="0012" ROLLNAME="ZED_INTERNET_USER_STATUS" ADMINFIELD="0" INTTYPE="C" INTLEN="000008" DOMNAME="ICON" ROUTPUTLEN="000000" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="CHAR" LENG="000004" OUTPUTLEN="000004" DECIMALS="000000" ENTITYTAB="ICON" MASK="  CHARE" MASKLEN="0000" DDTEXT="Internet User Status" REPTEXT="Status" SCRTEXT_S="Status" SCRTEXT_M="Status" SCRTEXT_L="Status" DOMMASTER="D" DOMNAME3L="ICON" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZST_ALV_ZRUSW01" FIELDNAME="PASSWORD" DDLANGUAGE="E" POSITION="0013" ROLLNAME="WWWPASS" ADMINFIELD="0" INTTYPE="C" INTLEN="000032" DOMNAME="WWWPWD" ROUTPUTLEN="000000" HEADLEN="16" SCRLEN1="10" SCRLEN2="15" SCRLEN3="30" DTELMASTER="D" DATATYPE="CHAR" LENG="000016" OUTPUTLEN="000016" DECIMALS="000000" LOWERCASE="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Password for Internet user" REPTEXT="Password" SCRTEXT_S="Password" SCRTEXT_M="Password" SCRTEXT_L="Password for Internet user" DOMNAME3L="WWWPWD" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
 </TABL>
 <TABL TABNAME="ZSTUSWIU_ALV" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="User Switch - Internet Users maintenance ALV" AUTHCLASS="00" PROZPUFF="000" EXCLASS="1">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZSTUSWIU_ALV" FIELDNAME="OBJTYPE" DDLANGUAGE="E" POSITION="0001" ROLLNAME="OJ_NAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000020" DOMNAME="OJ_NAME" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000010" OUTPUTLEN="000010" DECIMALS="000000" ENTITYTAB="TOJTB" MASK="  CHARE" MASKLEN="0000" DDTEXT="Object type" REPTEXT="Obj. type" SCRTEXT_S="Obj.type" SCRTEXT_M="Object type" SCRTEXT_L="Object type" DOMMASTER="D" DOMNAME3L="OJ_NAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZSTUSWIU_ALV" FIELDNAME="OBJID" DDLANGUAGE="E" POSITION="0002" ROLLNAME="WWWOBJID" ADMINFIELD="0" INTTYPE="C" INTLEN="000032" DOMNAME="WWWOBJID" ROUTPUTLEN="000000" MEMORYID="UID" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000016" OUTPUTLEN="000016" DECIMALS="000000" ENTITYTAB="BAPIUSW01" CONVEXIT="ALPHA" MASK="  CHARE" MASKLEN="0000" DDTEXT="User ID in Internet user master" REPTEXT="User ID" SCRTEXT_S="User ID" SCRTEXT_M="User ID" SCRTEXT_L="Internet user ID" DOMMASTER="D" DOMNAME3L="WWWOBJID" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZSTUSWIU_ALV" FIELDNAME="ADDRNUMBER" DDLANGUAGE="E" POSITION="0003" ROLLNAME="AD_ADDRNUM" ADMINFIELD="0" INTTYPE="C" INTLEN="000020" DOMNAME="AD_ADDRNUM" ROUTPUTLEN="000000" MEMORYID="ADR" LOGFLAG="X" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000010" OUTPUTLEN="000010" DECIMALS="000000" ENTITYTAB="ADRC" CONVEXIT="ALPHA" MASK="  CHARE" MASKLEN="0000" DDTEXT="Address number" REPTEXT="Addr. no." SCRTEXT_S="Addr. no." SCRTEXT_M="Address number" SCRTEXT_L="Address number" DOMNAME3L="AD_ADDRNUM" DEPTH="00" COMPTYPE="E" DEFFDNAME="ADDR_NO" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZSTUSWIU_ALV" FIELDNAME="ADDR_GROUP" DDLANGUAGE="E" POSITION="0004" ROLLNAME="AD_GROUP" ADMINFIELD="0" INTTYPE="C" INTLEN="000008" DOMNAME="AD_GROUP" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000004" OUTPUTLEN="000004" DECIMALS="000000" ENTITYTAB="TSAD7" MASK="  CHARE" MASKLEN="0000" DDTEXT="Address Group (Key) (Business Address Services)" REPTEXT="Key" SCRTEXT_S="Addr. grp." SCRTEXT_M="Address group" SCRTEXT_L="Address group" DOMNAME3L="AD_GROUP" DEPTH="00" COMPTYPE="E" DEFFDNAME="ADDR_GROUP" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZSTUSWIU_ALV" FIELDNAME="NAME1" DDLANGUAGE="E" POSITION="0005" ROLLNAME="AD_NAME1" ADMINFIELD="0" INTTYPE="C" INTLEN="000080" DOMNAME="TEXT40" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="40" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000040" OUTPUTLEN="000040" DECIMALS="000000" LOWERCASE="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Name 1" REPTEXT="Name" SCRTEXT_S="Name" SCRTEXT_M="Name" SCRTEXT_L="Name" DOMNAME3L="TEXT40" DEPTH="00" COMPTYPE="E" DEFFDNAME="NAME" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZSTUSWIU_ALV" FIELDNAME="NAME2" DDLANGUAGE="E" POSITION="0006" ROLLNAME="AD_NAME2" ADMINFIELD="0" INTTYPE="C" INTLEN="000080" DOMNAME="TEXT40" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="40" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000040" OUTPUTLEN="000040" DECIMALS="000000" LOWERCASE="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Name 2" REPTEXT="Name 2" SCRTEXT_S="Name 2" SCRTEXT_M="Name 2" SCRTEXT_L="Name 2" DOMNAME3L="TEXT40" DEPTH="00" COMPTYPE="E" DEFFDNAME="NAME_2" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZSTUSWIU_ALV" FIELDNAME="SORT1" DDLANGUAGE="E" POSITION="0007" ROLLNAME="AD_SORT1" ADMINFIELD="0" INTTYPE="C" INTLEN="000040" DOMNAME="CHAR20" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="20" SCRLEN1="02" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000020" OUTPUTLEN="000020" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Search Term 1" REPTEXT="Search Term 1" SCRTEXT_S="1" SCRTEXT_M="Search Term 1" SCRTEXT_L="Search Term 1" DOMNAME3L="CHAR20" DEPTH="00" COMPTYPE="E" DEFFDNAME="SORT1" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZSTUSWIU_ALV" FIELDNAME="SORT2" DDLANGUAGE="E" POSITION="0008" ROLLNAME="AD_SORT2" ADMINFIELD="0" INTTYPE="C" INTLEN="000040" DOMNAME="CHAR20" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="20" SCRLEN1="02" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000020" OUTPUTLEN="000020" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Search Term 2" REPTEXT="Search Term 2" SCRTEXT_S="2" SCRTEXT_M="Search Term 2" SCRTEXT_L="Search Term 2" DOMNAME3L="CHAR20" DEPTH="00" COMPTYPE="E" DEFFDNAME="SORT2" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZSTUSWIU_ALV" FIELDNAME="CELLSTYLES" DDLANGUAGE="E" POSITION="0009" ROLLNAME="LVC_T_STYL" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="TTYP" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  TTYPL" MASKLEN="0000" DDTEXT="ALV Control: Style Table for Cells" DEPTH="00" COMPTYPE="L" EXCLASS="0" DBPOSITION="0000"/>
 </TABL>
 <TABL TABNAME="ZSTUSWUA_ALV" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="User Switch - Users assignment maintenance ALV" AUTHCLASS="00" PROZPUFF="000" EXCLASS="1">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZSTUSWUA_ALV" FIELDNAME="OBJTYPE" DDLANGUAGE="E" POSITION="0001" ROLLNAME="OJ_NAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000020" DOMNAME="OJ_NAME" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000010" OUTPUTLEN="000010" DECIMALS="000000" ENTITYTAB="TOJTB" MASK="  CHARE" MASKLEN="0000" DDTEXT="Object type" REPTEXT="Obj. type" SCRTEXT_S="Obj.type" SCRTEXT_M="Object type" SCRTEXT_L="Object type" DOMMASTER="D" DOMNAME3L="OJ_NAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZSTUSWUA_ALV" FIELDNAME="OBJID" DDLANGUAGE="E" POSITION="0002" ROLLNAME="WWWOBJID" ADMINFIELD="0" INTTYPE="C" INTLEN="000032" DOMNAME="WWWOBJID" ROUTPUTLEN="000000" MEMORYID="UID" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000016" OUTPUTLEN="000016" DECIMALS="000000" ENTITYTAB="BAPIUSW01" CONVEXIT="ALPHA" MASK="  CHARE" MASKLEN="0000" DDTEXT="User ID in Internet user master" REPTEXT="User ID" SCRTEXT_S="User ID" SCRTEXT_M="User ID" SCRTEXT_L="Internet user ID" DOMMASTER="D" DOMNAME3L="WWWOBJID" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZSTUSWUA_ALV" FIELDNAME="APPID" DDLANGUAGE="E" POSITION="0003" ROLLNAME="ZDE_RESTAPI_APP_ID" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" ROUTPUTLEN="000000" HEADLEN="23" SCRLEN1="10" SCRLEN2="15" SCRLEN3="23" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="REST API Application ID" REPTEXT="REST API Application ID" SCRTEXT_S="App ID" SCRTEXT_M="REST API App ID" SCRTEXT_L="REST API Application ID" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZSTUSWUA_ALV" FIELDNAME="BNAME" DDLANGUAGE="E" POSITION="0004" ROLLNAME="XUBNAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000024" DOMNAME="XUBNAME" ROUTPUTLEN="000000" MEMORYID="XUS" HEADLEN="12" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000012" OUTPUTLEN="000012" DECIMALS="000000" ENTITYTAB="USR02" MASK="  CHARE" MASKLEN="0000" DDTEXT="User Name in User Master Record" REPTEXT="User Name" SCRTEXT_S="User" SCRTEXT_M="User" SCRTEXT_L="User" DOMMASTER="D" DOMNAME3L="XUBNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZSTUSWUA_ALV" FIELDNAME="REFUSER" DDLANGUAGE="E" POSITION="0005" ROLLNAME="ZDE_RESTAPI_REFUSRONLY" ADMINFIELD="0" INTTYPE="C" INTLEN="000002" DOMNAME="ZDO_RESTAPI_REFUSRONLY" ROUTPUTLEN="000000" HEADLEN="14" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="CHAR" LENG="000001" OUTPUTLEN="000001" DECIMALS="000000" VALEXI="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="REST API  - Flag ref. user only" REPTEXT="Ref. User Only" SCRTEXT_S="Ref. User" SCRTEXT_M="Ref. User Only" SCRTEXT_L="Reference User Only" DOMNAME3L="ZDO_RESTAPI_REFUSRONLY" SHLPORIGIN="F" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZSTUSWUA_ALV" FIELDNAME="PKEY" DDLANGUAGE="E" POSITION="0006" ROLLNAME="ZDE_RESTAPI_PRIVATE_KEY" ADMINFIELD="0" INTTYPE="C" INTLEN="000064" ROUTPUTLEN="000000" HEADLEN="32" SCRLEN1="10" SCRLEN2="15" SCRLEN3="25" DTELMASTER="E" DATATYPE="CHAR" LENG="000032" OUTPUTLEN="000032" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Internet User Private Key - Authentication by token" REPTEXT="Private Key" SCRTEXT_S="Priv.Key" SCRTEXT_M="Private Key" SCRTEXT_L="Internet User Private Key" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZSTUSWUA_ALV" FIELDNAME="CHANGED" DDLANGUAGE="E" POSITION="0007" ROLLNAME="CHAR1" ADMINFIELD="0" INTTYPE="C" INTLEN="000002" DOMNAME="CHAR1" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DTELMASTER="D" DATATYPE="CHAR" LENG="000001" OUTPUTLEN="000001" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Single-Character Indicator" DOMNAME3L="CHAR1" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZSTUSWUA_ALV" FIELDNAME="CELLSTYLES" DDLANGUAGE="E" POSITION="0008" ROLLNAME="LVC_T_STYL" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="TTYP" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  TTYPL" MASKLEN="0000" DDTEXT="ALV Control: Style Table for Cells" DEPTH="00" COMPTYPE="L" EXCLASS="0" DBPOSITION="0000"/>
 </TABL>
 <TABL TABNAME="ZSTUSWDU_ALV" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="User Switch - Dialog users maintenance ALV" AUTHCLASS="00" PROZPUFF="000" EXCLASS="1">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZSTUSWDU_ALV" FIELDNAME="BNAME" DDLANGUAGE="E" POSITION="0001" ROLLNAME="XUBNAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000024" DOMNAME="XUBNAME" ROUTPUTLEN="000000" MEMORYID="XUS" HEADLEN="12" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000012" OUTPUTLEN="000012" DECIMALS="000000" ENTITYTAB="USR02" MASK="  CHARE" MASKLEN="0000" DDTEXT="User Name in User Master Record" REPTEXT="User Name" SCRTEXT_S="User" SCRTEXT_M="User" SCRTEXT_L="User" DOMMASTER="D" DOMNAME3L="XUBNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZSTUSWDU_ALV" FIELDNAME="NAME_FIRST" DDLANGUAGE="E" POSITION="0002" ROLLNAME="AD_NAMEFIR" ADMINFIELD="0" INTTYPE="C" INTLEN="000080" DOMNAME="TEXT40" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="40" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000040" OUTPUTLEN="000040" DECIMALS="000000" LOWERCASE="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="First name" REPTEXT="First name" SCRTEXT_S="First name" SCRTEXT_M="First name" SCRTEXT_L="First name" DOMNAME3L="TEXT40" DEPTH="00" COMPTYPE="E" DEFFDNAME="FIRSTNAME" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZSTUSWDU_ALV" FIELDNAME="NAME_LAST" DDLANGUAGE="E" POSITION="0003" ROLLNAME="AD_NAMELAS" ADMINFIELD="0" INTTYPE="C" INTLEN="000080" DOMNAME="TEXT40" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="40" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000040" OUTPUTLEN="000040" DECIMALS="000000" LOWERCASE="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Last name" REPTEXT="Last name" SCRTEXT_S="Last name" SCRTEXT_M="Last name" SCRTEXT_L="Last name" DOMNAME3L="TEXT40" DEPTH="00" COMPTYPE="E" DEFFDNAME="LASTNAME" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZSTUSWDU_ALV" FIELDNAME="PASSWORD" DDLANGUAGE="E" POSITION="0004" ROLLNAME="WWWPASS" ADMINFIELD="0" INTTYPE="C" INTLEN="000032" DOMNAME="WWWPWD" ROUTPUTLEN="000000" HEADLEN="16" SCRLEN1="10" SCRLEN2="15" SCRLEN3="30" DTELMASTER="D" DATATYPE="CHAR" LENG="000016" OUTPUTLEN="000016" DECIMALS="000000" LOWERCASE="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Password for Internet user" REPTEXT="Password" SCRTEXT_S="Password" SCRTEXT_M="Password" SCRTEXT_L="Password for Internet user" DOMNAME3L="WWWPWD" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZSTUSWDU_ALV" FIELDNAME="CELLSTYLES" DDLANGUAGE="E" POSITION="0005" ROLLNAME="LVC_T_STYL" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="TTYP" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  TTYPL" MASKLEN="0000" DDTEXT="ALV Control: Style Table for Cells" DEPTH="00" COMPTYPE="L" EXCLASS="0" DBPOSITION="0000"/>
 </TABL>
 <TABL TABNAME="ZTBUSWDU" DDLANGUAGE="E" TABCLASS="TRANSP" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" CLIDEP="X" DDTEXT="User Switch - Dialog Users" AUTHCLASS="00" MAINFLAG="X" CONTFLAG="A" PROZPUFF="000" EXCLASS="1">
  <dd09l TABNAME="ZTBUSWDU" AS4LOCAL="A" AS4VERS="0000" TABKAT="0" TABART="APPL1" PUFFERUNG="X" SCHFELDANZ="000" PROTOKOLL="X" BUFALLOW="X"/>
  <dd03p TABNAME="ZTBUSWDU" FIELDNAME="MANDT" DDLANGUAGE="E" POSITION="0001" KEYFLAG="X" ROLLNAME="MANDT" ADMINFIELD="0" INTTYPE="C" INTLEN="000006" NOTNULL="X" DOMNAME="MANDT" ROUTPUTLEN="000000" HEADLEN="03" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CLNT" LENG="000003" OUTPUTLEN="000003" DECIMALS="000000" ENTITYTAB="T000" MASK="  CLNTE" MASKLEN="0000" DDTEXT="Client" REPTEXT="Cl." SCRTEXT_S="Client" SCRTEXT_M="Client" SCRTEXT_L="Client" DOMNAME3L="MANDT" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZTBUSWDU" FIELDNAME="BNAME" DDLANGUAGE="E" POSITION="0002" KEYFLAG="X" ROLLNAME="XUBNAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000024" NOTNULL="X" DOMNAME="XUBNAME" ROUTPUTLEN="000000" MEMORYID="XUS" HEADLEN="12" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000012" OUTPUTLEN="000012" DECIMALS="000000" ENTITYTAB="USR02" MASK="  CHARE" MASKLEN="0000" DDTEXT="User Name in User Master Record" REPTEXT="User Name" SCRTEXT_S="User" SCRTEXT_M="User" SCRTEXT_L="User" DOMMASTER="D" DOMNAME3L="XUBNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZTBUSWDU" FIELDNAME="PASSWORD" DDLANGUAGE="E" POSITION="0003" ROLLNAME="WWWPASS" ADMINFIELD="0" INTTYPE="C" INTLEN="000032" DOMNAME="WWWPWD" ROUTPUTLEN="000000" HEADLEN="16" SCRLEN1="10" SCRLEN2="15" SCRLEN3="30" DTELMASTER="D" DATATYPE="CHAR" LENG="000016" OUTPUTLEN="000016" DECIMALS="000000" LOWERCASE="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Password for Internet user" REPTEXT="Password" SCRTEXT_S="Password" SCRTEXT_M="Password" SCRTEXT_L="Password for Internet user" DOMNAME3L="WWWPWD" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
 </TABL>
 <TABL TABNAME="ZTBUSWIU" DDLANGUAGE="E" TABCLASS="TRANSP" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" CLIDEP="X" DDTEXT="User Switch - Internet Users" AUTHCLASS="00" MAINFLAG="X" CONTFLAG="A" PROZPUFF="000" EXCLASS="1">
  <dd09l TABNAME="ZTBUSWIU" AS4LOCAL="A" AS4VERS="0000" TABKAT="0" TABART="APPL1" PUFFERUNG="X" SCHFELDANZ="000" PROTOKOLL="X" BUFALLOW="X"/>
  <dd03p TABNAME="ZTBUSWIU" FIELDNAME="MANDT" DDLANGUAGE="E" POSITION="0001" KEYFLAG="X" ROLLNAME="MANDT" ADMINFIELD="0" INTTYPE="C" INTLEN="000006" NOTNULL="X" DOMNAME="MANDT" ROUTPUTLEN="000000" HEADLEN="03" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CLNT" LENG="000003" OUTPUTLEN="000003" DECIMALS="000000" ENTITYTAB="T000" MASK="  CLNTE" MASKLEN="0000" DDTEXT="Client" REPTEXT="Cl." SCRTEXT_S="Client" SCRTEXT_M="Client" SCRTEXT_L="Client" DOMNAME3L="MANDT" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZTBUSWIU" FIELDNAME="OBJTYPE" DDLANGUAGE="E" POSITION="0002" KEYFLAG="X" ROLLNAME="OJ_NAME" CHECKTABLE="TOJTB" ADMINFIELD="0" INTTYPE="C" INTLEN="000020" NOTNULL="X" DOMNAME="OJ_NAME" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000010" OUTPUTLEN="000010" DECIMALS="000000" ENTITYTAB="TOJTB" MASK="  CHARE" MASKLEN="0000" DDTEXT="Object type" REPTEXT="Obj. type" SCRTEXT_S="Obj.type" SCRTEXT_M="Object type" SCRTEXT_L="Object type" DOMMASTER="D" DOMNAME3L="OJ_NAME" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZTBUSWIU" FIELDNAME="OBJID" DDLANGUAGE="E" POSITION="0003" KEYFLAG="X" ROLLNAME="WWWOBJID" ADMINFIELD="0" INTTYPE="C" INTLEN="000032" NOTNULL="X" DOMNAME="WWWOBJID" ROUTPUTLEN="000000" MEMORYID="UID" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000016" OUTPUTLEN="000016" DECIMALS="000000" ENTITYTAB="BAPIUSW01" CONVEXIT="ALPHA" MASK="  CHARE" MASKLEN="0000" DDTEXT="User ID in Internet user master" REPTEXT="User ID" SCRTEXT_S="User ID" SCRTEXT_M="User ID" SCRTEXT_L="Internet user ID" DOMMASTER="D" DOMNAME3L="WWWOBJID" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZTBUSWIU" FIELDNAME="ADDRNUMBER" DDLANGUAGE="E" POSITION="0004" ROLLNAME="AD_ADDRNUM" ADMINFIELD="0" INTTYPE="C" INTLEN="000020" DOMNAME="AD_ADDRNUM" ROUTPUTLEN="000000" MEMORYID="ADR" LOGFLAG="X" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000010" OUTPUTLEN="000010" DECIMALS="000000" ENTITYTAB="ADRC" CONVEXIT="ALPHA" MASK="  CHARE" MASKLEN="0000" DDTEXT="Address number" REPTEXT="Addr. no." SCRTEXT_S="Addr. no." SCRTEXT_M="Address number" SCRTEXT_L="Address number" DOMNAME3L="AD_ADDRNUM" DEPTH="00" COMPTYPE="E" DEFFDNAME="ADDR_NO" EXCLASS="0" DBPOSITION="0000"/>
  <dd05m TABNAME="ZTBUSWIU" FIELDNAME="OBJTYPE" FORTABLE="ZTBUSWIU" FORKEY="OBJTYPE" CHECKTABLE="TOJTB" CHECKFIELD="NAME" PRIMPOS="0001" DOMNAME="OJ_NAME" DATATYPE="CHAR" LENG="000010"/>
  <dd08v TABNAME="ZTBUSWIU" FIELDNAME="OBJTYPE" CHECKTABLE="TOJTB"/>
 </TABL>
 <TRAN TCODE="ZTUSW00" PGMNA="ZRUSW00" DYPNO="1000" CINFO="80">
  <tstct SPRSL="E" TCODE="ZTUSW00" TTEXT="User Switch Setup"/>
  <tstcc TCODE="ZTUSW00" S_WIN32="X"/>
  <tstcp/>
  <rsstcd ST_PROG="X" DEVCLASS="$TMP"/>
 </TRAN>
 <TRAN TCODE="ZTUSW02" DYPNO="0000" CINFO="02">
  <tstct SPRSL="E" TCODE="ZTUSW02" TTEXT="User Switch Setup - Cluster"/>
  <tstcc TCODE="ZTUSW02" S_WIN32="X"/>
  <tstcp TCODE="ZTUSW02" PARAM="/*SM34 VCLDIR-VCLNAME=ZVCUSW;UPDATE=X;"/>
  <rsstcd ST_TCODE="X" ST_SKIP_1="X" CALL_TCODE="SM34" DEVCLASS="$TMP"/>
  <rsparam FIELD="VCLDIR-VCLNAME" VALUE="ZVCUSW"/>
  <rsparam FIELD="UPDATE" VALUE="X"/>
 </TRAN>
 <TRAN TCODE="ZTUSW01" PGMNA="ZRUSW01" DYPNO="1000" CINFO="80">
  <tstct SPRSL="E" TCODE="ZTUSW01" TTEXT="Internet user password maintenance"/>
  <tstcc TCODE="ZTUSW01" S_WIN32="X"/>
  <tstcp/>
  <rsstcd ST_PROG="X" DEVCLASS="$TMP"/>
 </TRAN>
</nugget>
